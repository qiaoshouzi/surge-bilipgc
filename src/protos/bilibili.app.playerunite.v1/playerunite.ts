// @generated by protobuf-ts 2.9.0 with parameter long_type_number
// @generated from protobuf file "bilibili.app.playerunite.v1/playerunite.proto" (package "bilibili.app.playerunite.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Any } from "../google/protobuf/any";
/**
 * ArcConf消息
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.ArcConf
 */
export interface ArcConf {
    /**
     * 是否支持
     *
     * @generated from protobuf field: bool is_support = 1;
     */
    isSupport: boolean;
    /**
     * 是否禁用
     *
     * @generated from protobuf field: bool disabled = 2;
     */
    disabled: boolean;
    /**
     * 额外内容
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.ExtraContent extra_content = 3;
     */
    extraContent?: ExtraContent;
    /**
     * 不支持场景列表
     *
     * @generated from protobuf field: repeated int32 unsupport_scene = 4;
     */
    unsupportScene: number[];
}
/**
 *
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.BackgroundInfo
 */
export interface BackgroundInfo {
    /**
     *
     *
     * @generated from protobuf field: string drawable_color = 1;
     */
    drawableColor: string;
    /**
     *
     *
     * @generated from protobuf field: string drawable_bitmap_url = 2;
     */
    drawableBitmapUrl: string;
    /**
     *
     *
     * @generated from protobuf field: int32 effects = 3;
     */
    effects: number;
}
/**
 *
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.BadgeInfo
 */
export interface BadgeInfo {
    /**
     *
     *
     * @generated from protobuf field: string text = 1;
     */
    text: string;
    /**
     *
     *
     * @generated from protobuf field: string bg_color = 2;
     */
    bgColor: string;
    /**
     *
     *
     * @generated from protobuf field: string bg_color_night = 3;
     */
    bgColorNight: string;
    /**
     *
     *
     * @generated from protobuf field: string text_color = 4;
     */
    textColor: string;
    /**
     *
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.GradientColor bg_gradient_color = 5;
     */
    bgGradientColor?: GradientColor;
    /**
     *
     *
     * @generated from protobuf field: string img = 6;
     */
    img: string;
}
/**
 *
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.BottomDisplay
 */
export interface BottomDisplay {
    /**
     *
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.TextInfo title = 1;
     */
    title?: TextInfo;
    /**
     *
     *
     * @generated from protobuf field: string icon = 2;
     */
    icon: string;
}
/**
 * 按钮组件
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.Button
 */
export interface Button {
    /**
     * 按钮文本
     *
     * @generated from protobuf field: string text = 1;
     */
    text: string;
    /**
     * 按钮跳转链接
     *
     * @generated from protobuf field: string link = 2;
     */
    link: string;
    /**
     * 埋点上报相关
     *
     * @generated from protobuf field: map<string, string> report_params = 3;
     */
    reportParams: {
        [key: string]: string;
    };
}
/**
 *
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.ButtonInfo
 */
export interface ButtonInfo {
    /**
     *
     *
     * @generated from protobuf field: string text = 1;
     */
    text: string;
    /**
     *
     *
     * @generated from protobuf field: string text_color = 2;
     */
    textColor: string;
    /**
     *
     *
     * @generated from protobuf field: string text_color_night = 3;
     */
    textColorNight: string;
    /**
     *
     *
     * @generated from protobuf field: string bg_color = 4;
     */
    bgColor: string;
    /**
     *
     *
     * @generated from protobuf field: string bg_color_night = 5;
     */
    bgColorNight: string;
    /**
     *
     *
     * @generated from protobuf field: string link = 6;
     */
    link: string;
    /**
     *
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.ButtonAction action_type = 7;
     */
    actionType: ButtonAction;
    /**
     *
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.BadgeInfo badge_info = 8;
     */
    badgeInfo?: BadgeInfo;
    /**
     *
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.Report report = 9;
     */
    report?: Report;
    /**
     *
     *
     * @generated from protobuf field: string left_strikethrough_text = 10;
     */
    leftStrikethroughText: string;
    /**
     *
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.TextInfo simple_text_info = 11;
     */
    simpleTextInfo?: TextInfo;
    /**
     *
     *
     * @generated from protobuf field: string simple_bg_color = 12;
     */
    simpleBgColor: string;
    /**
     *
     *
     * @generated from protobuf field: string simple_bg_color_night = 13;
     */
    simpleBgColorNight: string;
    /**
     *
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.GradientColor bg_gradient_color = 14;
     */
    bgGradientColor?: GradientColor;
    /**
     *
     *
     * @generated from protobuf field: map<string, string> order_report_params = 15;
     */
    orderReportParams: {
        [key: string]: string;
    };
    /**
     *
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.TaskParam task_param = 16;
     */
    taskParam?: TaskParam;
    /**
     *
     *
     * @generated from protobuf field: string frame_color = 17;
     */
    frameColor: string;
    /**
     *
     *
     * @generated from protobuf field: string icon = 18;
     */
    icon: string;
}
/**
 *
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.ComprehensiveToast
 */
export interface ComprehensiveToast {
    /**
     *
     *
     * @generated from protobuf field: int32 type = 1;
     */
    type: number;
    /**
     *
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.ButtonInfo button = 2;
     */
    button?: ButtonInfo;
    /**
     *
     *
     * @generated from protobuf field: int32 show_style_type = 3;
     */
    showStyleType: number;
    /**
     *
     *
     * @generated from protobuf field: string icon = 4;
     */
    icon: string;
    /**
     *
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.TextInfo toast_text = 5;
     */
    toastText?: TextInfo;
    /**
     *
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.Report report = 6;
     */
    report?: Report;
    /**
     *
     *
     * @generated from protobuf field: map<string, string> order_report_params = 7;
     */
    orderReportParams: {
        [key: string]: string;
    };
}
/**
 *
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.ConfValue
 */
export interface ConfValue {
    /**
     * @generated from protobuf oneof: value
     */
    value: {
        oneofKind: "switchVal";
        /**
         *
         *
         * @generated from protobuf field: int32 switch_val = 1;
         */
        switchVal: number;
    } | {
        oneofKind: "selectedVal";
        /**
         *
         *
         * @generated from protobuf field: int32 selected_val = 2;
         */
        selectedVal: number;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Dash条目
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.DashItem
 */
export interface DashItem {
    /**
     * 清晰度
     *
     * @generated from protobuf field: uint32 id = 1;
     */
    id: number;
    /**
     * 主线流
     *
     * @generated from protobuf field: string base_url = 2;
     */
    baseUrl: string;
    /**
     * 备用流
     *
     * @generated from protobuf field: repeated string backup_url = 3;
     */
    backupUrl: string[];
    /**
     * 带宽
     *
     * @generated from protobuf field: uint32 bandwidth = 4;
     */
    bandwidth: number;
    /**
     * 编码id
     *
     * @generated from protobuf field: uint32 codecid = 5;
     */
    codecid: number;
    /**
     * md5
     *
     * @generated from protobuf field: string md5 = 6;
     */
    md5: string;
    /**
     * 大小
     *
     * @generated from protobuf field: uint64 size = 7;
     */
    size: number;
    /**
     * 帧率
     *
     * @generated from protobuf field: string frame_rate = 8;
     */
    frameRate: string;
    /**
     * DRM密钥
     *
     * @generated from protobuf field: string widevine_pssh = 9;
     */
    widevinePssh: string;
}
/**
 * 视频流信息: dash流
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.DashVideo
 */
export interface DashVideo {
    /**
     * 主线流
     *
     * @generated from protobuf field: string base_url = 1;
     */
    baseUrl: string;
    /**
     * 备用流
     *
     * @generated from protobuf field: repeated string backup_url = 2;
     */
    backupUrl: string[];
    /**
     * 带宽
     *
     * @generated from protobuf field: uint32 bandwidth = 3;
     */
    bandwidth: number;
    /**
     * 编码id
     *
     * @generated from protobuf field: uint32 codecid = 4;
     */
    codecid: number;
    /**
     * md5
     *
     * @generated from protobuf field: string md5 = 5;
     */
    md5: string;
    /**
     * 大小
     *
     * @generated from protobuf field: uint64 size = 6;
     */
    size: number;
    /**
     * 伴音质量id
     *
     * @generated from protobuf field: uint32 audio_id = 7;
     */
    audioId: number;
    /**
     * 是否非全二压
     *
     * @generated from protobuf field: bool no_rexcode = 8;
     */
    noRexcode: boolean;
    /**
     * 帧率
     *
     * @generated from protobuf field: string frame_rate = 9;
     */
    frameRate: string;
    /**
     * 宽
     *
     * @generated from protobuf field: int32 width = 10;
     */
    width: number;
    /**
     * 高
     *
     * @generated from protobuf field: int32 height = 11;
     */
    height: number;
    /**
     * DRM密钥
     *
     * @generated from protobuf field: string widevine_pssh = 12;
     */
    widevinePssh: string;
}
/**
 *
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.DeviceConf
 */
export interface DeviceConf {
    /**
     * @generated from protobuf field: bilibili.app.playerunite.v1.ConfValue conf_value = 1;
     */
    confValue?: ConfValue;
}
/**
 *
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.Dialog
 */
export interface Dialog {
    /**
     *
     *
     * @generated from protobuf field: int32 style_type = 1;
     */
    styleType: number;
    /**
     *
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.BackgroundInfo background_info = 2;
     */
    backgroundInfo?: BackgroundInfo;
    /**
     *
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.TextInfo title = 3;
     */
    title?: TextInfo;
    /**
     *
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.TextInfo subtitle = 4;
     */
    subtitle?: TextInfo;
    /**
     *
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.ImageInfo image = 5;
     */
    image?: ImageInfo;
    /**
     *
     *
     * @generated from protobuf field: repeated bilibili.app.playerunite.v1.ButtonInfo button = 6;
     */
    button: ButtonInfo[];
    /**
     *
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.ButtonInfo bottom_desc = 7;
     */
    bottomDesc?: ButtonInfo;
    /**
     *
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.Report report = 8;
     */
    report?: Report;
    /**
     *
     *
     * @generated from protobuf field: int32 count_down_sec = 9;
     */
    countDownSec: number;
    /**
     *
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.TextInfo right_bottom_desc = 10;
     */
    rightBottomDesc?: TextInfo;
    /**
     *
     *
     * @generated from protobuf field: repeated bilibili.app.playerunite.v1.BottomDisplay bottom_display = 11;
     */
    bottomDisplay: BottomDisplay[];
    /**
     *
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.ExtData ext_data = 12;
     */
    extData?: ExtData;
    /**
     *
     *
     * @generated from protobuf field: int32 limit_action_type = 13;
     */
    limitActionType: number;
}
/**
 * 当前分辨率信息
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.Dimension
 */
export interface Dimension {
    /**
     * 宽
     *
     * @generated from protobuf field: int32 width = 1;
     */
    width: number;
    /**
     * 长
     *
     * @generated from protobuf field: int32 height = 2;
     */
    height: number;
    /**
     * 旋转角度
     *
     * @generated from protobuf field: int32 rotate = 3;
     */
    rotate: number;
}
/**
 * 杜比伴音流信息
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.DolbyItem
 */
export interface DolbyItem {
    /**
     * 杜比类型
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.DolbyItem.Type type = 1;
     */
    type: DolbyItem_Type;
    /**
     * 音频流
     *
     * @generated from protobuf field: repeated bilibili.app.playerunite.v1.DashItem audio = 2;
     */
    audio: DashItem[];
}
/**
 * 杜比类型
 *
 * @generated from protobuf enum bilibili.app.playerunite.v1.DolbyItem.Type
 */
export enum DolbyItem_Type {
    /**
     * NONE
     *
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * 普通杜比音效
     *
     * @generated from protobuf enum value: COMMON = 1;
     */
    COMMON = 1,
    /**
     * 全景杜比音效
     *
     * @generated from protobuf enum value: ATMOS = 2;
     */
    ATMOS = 2
}
/**
 * 事件
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.Event
 */
export interface Event {
    /**
     * 震动
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.Shake shake = 1;
     */
    shake?: Shake;
}
/**
 *
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.ExtData
 */
export interface ExtData {
    /**
     *
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.ExtDataType type = 1;
     */
    type: ExtDataType;
    /**
     * @generated from protobuf oneof: data
     */
    data: {
        oneofKind: "playListInfo";
        /**
         * @generated from protobuf field: bilibili.app.playerunite.v1.PlayListInfo play_list_info = 2;
         */
        playListInfo: PlayListInfo;
    } | {
        oneofKind: undefined;
    };
}
/**
 * ? 错误码补充信息
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.ExtraContent
 */
export interface ExtraContent {
    /**
     *
     *
     * @generated from protobuf field: string disable_reason = 1;
     */
    disableReason: string;
    /**
     *
     *
     * @generated from protobuf field: int64 disable_code = 2;
     */
    disableCode: number;
}
/**
 *
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.GradientColor
 */
export interface GradientColor {
    /**
     *
     *
     * @generated from protobuf field: string start_color = 1;
     */
    startColor: string;
    /**
     *
     *
     * @generated from protobuf field: string end_color = 2;
     */
    endColor: string;
}
/**
 * 播放历史
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.History
 */
export interface History {
    /**
     *
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.HistoryInfo current_video = 1;
     */
    currentVideo?: HistoryInfo;
    /**
     *
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.HistoryInfo related_video = 2;
     */
    relatedVideo?: HistoryInfo;
}
/**
 *
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.HistoryInfo
 */
export interface HistoryInfo {
    /**
     *
     *
     * @generated from protobuf field: int64 progress = 1;
     */
    progress: number;
    /**
     *
     *
     * @generated from protobuf field: int64 last_play_cid = 2;
     */
    lastPlayCid: number;
    /**
     *
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.Toast toast = 3;
     */
    toast?: Toast;
    /**
     *
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.Toast toast_without_time = 4;
     */
    toastWithoutTime?: Toast;
    /**
     *
     *
     * @generated from protobuf field: int64 last_play_aid = 5;
     */
    lastPlayAid: number;
}
/**
 *
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.ImageInfo
 */
export interface ImageInfo {
    /**
     *
     *
     * @generated from protobuf field: string url = 1;
     */
    url: string;
}
/**
 *
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.Interaction
 */
export interface Interaction {
    /**
     *
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.Node history_node = 1;
     */
    historyNode?: Node;
    /**
     *
     *
     * @generated from protobuf field: int64 graph_version = 2;
     */
    graphVersion: number;
    /**
     *
     *
     * @generated from protobuf field: string msg = 3;
     */
    msg: string;
    /**
     *
     *
     * @generated from protobuf field: int64 mark = 4;
     */
    mark: number;
}
/**
 * HIRES伴音流信息
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.LossLessItem
 */
export interface LossLessItem {
    /**
     * 是否为hires
     *
     * @generated from protobuf field: bool is_lossless_audio = 1;
     */
    isLosslessAudio: boolean;
    /**
     * 音频流信息
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.DashItem audio = 2;
     */
    audio?: DashItem;
    /**
     * 是否需要大会员
     *
     * @generated from protobuf field: bool need_vip = 3;
     */
    needVip: boolean;
}
/**
 *
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.Node
 */
export interface Node {
    /**
     *
     *
     * @generated from protobuf field: int64 node_id = 1;
     */
    nodeId: number;
    /**
     *
     *
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     *
     *
     * @generated from protobuf field: int64 cid = 3;
     */
    cid: number;
}
/**
 *
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.PlayArc
 */
export interface PlayArc {
    /**
     *
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.BizType video_type = 1;
     */
    videoType: BizType;
    /**
     *
     *
     * @generated from protobuf field: uint64 aid = 2;
     */
    aid: number;
    /**
     *
     *
     * @generated from protobuf field: uint64 cid = 3;
     */
    cid: number;
    /**
     *
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.DrmTechType drm_tech_type = 4;
     */
    drmTechType: DrmTechType;
    /**
     *
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.ArcType arc_type = 5;
     */
    arcType: ArcType;
    /**
     *
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.Interaction interaction = 6;
     */
    interaction?: Interaction;
    /**
     *
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.Dimension dimension = 7;
     */
    dimension?: Dimension;
    /**
     *
     *
     * @generated from protobuf field: int64 duration = 8;
     */
    duration: number;
    /**
     *
     *
     * @generated from protobuf field: bool is_preview = 9;
     */
    isPreview: boolean;
}
/**
 * 播放页信息-响应: PlayArcConf
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.PlayArcConf
 */
export interface PlayArcConf {
    /**
     * @generated from protobuf field: map<int32, bilibili.app.playerunite.v1.ArcConf> arc_confs = 1;
     */
    arcConfs: {
        [key: number]: ArcConf;
    };
}
/**
 *
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.PlayDeviceConf
 */
export interface PlayDeviceConf {
    /**
     *
     *
     * @generated from protobuf field: map<int32, bilibili.app.playerunite.v1.DeviceConf> device_confs = 1;
     */
    deviceConfs: {
        [key: number]: DeviceConf;
    };
}
/**
 *
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.PlayList
 */
export interface PlayList {
    /**
     *
     *
     * @generated from protobuf field: int64 season_id = 1;
     */
    seasonId: number;
    /**
     *
     *
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     *
     *
     * @generated from protobuf field: string cover = 3;
     */
    cover: string;
    /**
     *
     *
     * @generated from protobuf field: string link = 4;
     */
    link: string;
    /**
     *
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.BadgeInfo badge_info = 5;
     */
    badgeInfo?: BadgeInfo;
}
/**
 *
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.PlayListInfo
 */
export interface PlayListInfo {
    /**
     *
     *
     * @generated from protobuf field: repeated bilibili.app.playerunite.v1.PlayList play_list = 2;
     */
    playList: PlayList[];
}
/**
 * 视频下方广告 Banner
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.PromptBar
 */
export interface PromptBar {
    /**
     *
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.TextInfo title = 1;
     */
    title?: TextInfo;
    /**
     *
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.TextInfo subtitle = 2;
     */
    subtitle?: TextInfo;
    /**
     *
     *
     * @generated from protobuf field: string sub_title_icon = 3;
     */
    subTitleIcon: string;
    /**
     *
     *
     * @generated from protobuf field: string bg_image = 4;
     */
    bgImage: string;
    /**
     *
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.GradientColor bg_gradient_color = 5;
     */
    bgGradientColor?: GradientColor;
    /**
     *
     *
     * @generated from protobuf field: repeated bilibili.app.playerunite.v1.ButtonInfo button = 6;
     */
    button: ButtonInfo[];
    /**
     *
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.Report report = 7;
     */
    report?: Report;
    /**
     *
     *
     * @generated from protobuf field: string full_screen_ip_icon = 8;
     */
    fullScreenIpIcon: string;
    /**
     *
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.GradientColor full_screen_bg_gradient_color = 9;
     */
    fullScreenBgGradientColor?: GradientColor;
}
/**
 * 播放页信息-响应: 高画质试看信息
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.QnTrialInfo
 */
export interface QnTrialInfo {
    /**
     * 能否试看高画质
     *
     * @generated from protobuf field: bool trial_able = 1;
     */
    trialAble: boolean;
    /**
     *
     *
     * @generated from protobuf field: int32 remaining_times = 2;
     */
    remainingTimes: number;
    /**
     * @generated from protobuf field: int32 start = 3;
     */
    start: number;
    /**
     * @generated from protobuf field: int32 time_length = 4;
     */
    timeLength: number;
    /**
     * @generated from protobuf field: bilibili.app.playerunite.v1.Toast start_toast = 5;
     */
    startToast?: Toast;
    /**
     * @generated from protobuf field: bilibili.app.playerunite.v1.Toast end_toast = 6;
     */
    endToast?: Toast;
    /**
     * @generated from protobuf field: bilibili.app.playerunite.v1.Button quality_open_tip_btn = 8;
     */
    qualityOpenTipBtn?: Button;
}
/**
 *
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.Report
 */
export interface Report {
    /**
     *
     *
     * @generated from protobuf field: string show_event_id = 1;
     */
    showEventId: string;
    /**
     *
     *
     * @generated from protobuf field: string click_event_id = 2;
     */
    clickEventId: string;
    /**
     *
     *
     * @generated from protobuf field: string extends = 3;
     */
    extends: string;
}
/**
 * Dash Response, 未使用
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.ResponseDash
 */
export interface ResponseDash {
    /**
     * @generated from protobuf field: repeated bilibili.app.playerunite.v1.DashItem video = 1;
     */
    video: DashItem[];
    /**
     * @generated from protobuf field: repeated bilibili.app.playerunite.v1.DashItem audio = 2;
     */
    audio: DashItem[];
}
/**
 * 分段流条目
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.ResponseUrl
 */
export interface ResponseUrl {
    /**
     * 分段序号
     *
     * @generated from protobuf field: uint32 order = 1;
     */
    order: number;
    /**
     * 分段时长
     *
     * @generated from protobuf field: uint64 length = 2;
     */
    length: number;
    /**
     * 分段大小
     *
     * @generated from protobuf field: uint64 size = 3;
     */
    size: number;
    /**
     * 主线流
     *
     * @generated from protobuf field: string url = 4;
     */
    url: string;
    /**
     * 备用流
     *
     * @generated from protobuf field: repeated string backup_url = 5;
     */
    backupUrl: string[];
    /**
     * md5
     *
     * @generated from protobuf field: string md5 = 6;
     */
    md5: string;
}
/**
 * 方案
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.Scheme
 */
export interface Scheme {
    /**
     *
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.Scheme.ActionType action_type = 1;
     */
    actionType: Scheme_ActionType;
    /**
     *
     *
     * @generated from protobuf field: string toast = 2;
     */
    toast: string;
}
/**
 * @generated from protobuf enum bilibili.app.playerunite.v1.Scheme.ActionType
 */
export enum Scheme_ActionType {
    /**
     * @generated from protobuf enum value: UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: SHOW_TOAST = 1;
     */
    SHOW_TOAST = 1
}
/**
 * 视频流信息: 分段流
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.SegmentVideo
 */
export interface SegmentVideo {
    /**
     * @generated from protobuf field: repeated bilibili.app.playerunite.v1.ResponseUrl segment = 1;
     */
    segment: ResponseUrl[];
}
/**
 * 震动
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.Shake
 */
export interface Shake {
    /**
     *
     *
     * @generated from protobuf field: string file = 1;
     */
    file: string;
}
/**
 * 视频流信息
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.Stream
 */
export interface Stream {
    /**
     * 元数据
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.StreamInfo stream_info = 1;
     */
    streamInfo?: StreamInfo;
    /**
     * @generated from protobuf oneof: content
     */
    content: {
        oneofKind: "dashVideo";
        /**
         * dash流
         *
         * @generated from protobuf field: bilibili.app.playerunite.v1.DashVideo dash_video = 2;
         */
        dashVideo: DashVideo;
    } | {
        oneofKind: "segmentVideo";
        /**
         * 分段流
         *
         * @generated from protobuf field: bilibili.app.playerunite.v1.SegmentVideo segment_video = 3;
         */
        segmentVideo: SegmentVideo;
    } | {
        oneofKind: undefined;
    };
}
/**
 * 视频流信息: 元数据
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.StreamInfo
 */
export interface StreamInfo {
    /**
     * 清晰度
     *
     * @generated from protobuf field: uint32 quality = 1;
     */
    quality: number;
    /**
     * 格式
     *
     * @generated from protobuf field: string format = 2;
     */
    format: string;
    /**
     * 格式描述
     *
     * @generated from protobuf field: string description = 3;
     */
    description: string;
    /**
     * 错误码
     *
     * @generated from protobuf field: uint32 err_code = 4;
     */
    errCode: number;
    /**
     * 不满足条件信息
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.StreamLimit limit = 5;
     */
    limit?: StreamLimit;
    /**
     * 是否需要vip
     *
     * @generated from protobuf field: bool need_vip = 6;
     */
    needVip: boolean;
    /**
     * 是否需要登录
     *
     * @generated from protobuf field: bool need_login = 7;
     */
    needLogin: boolean;
    /**
     * 是否完整
     *
     * @generated from protobuf field: bool intact = 8;
     */
    intact: boolean;
    /**
     * 是否非全二压
     *
     * @generated from protobuf field: bool no_rexcode = 9;
     */
    noRexcode: boolean;
    /**
     * 清晰度属性位
     *
     * @generated from protobuf field: int64 attribute = 10;
     */
    attribute: number;
    /**
     * 新版格式描述
     *
     * @generated from protobuf field: string new_description = 11;
     */
    newDescription: string;
    /**
     * 格式文字
     *
     * @generated from protobuf field: string display_desc = 12;
     */
    displayDesc: string;
    /**
     * 新版格式描述备注
     *
     * @generated from protobuf field: string superscript = 13;
     */
    superscript: string;
    /**
     *
     *
     * @generated from protobuf field: bool vip_free = 14;
     */
    vipFree: boolean;
    /**
     *
     *
     * @generated from protobuf field: string subtitle = 15;
     */
    subtitle: string;
    /**
     * 方案
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.Scheme scheme = 16;
     */
    scheme?: Scheme;
    /**
     * 支持drm
     *
     * @generated from protobuf field: bool support_drm = 17;
     */
    supportDrm: boolean;
}
/**
 * 视频流信息: 流媒体元数据: 清晰度不满足条件信息
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.StreamLimit
 */
export interface StreamLimit {
    /**
     * 标题
     *
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * 跳转地址
     *
     * @generated from protobuf field: string uri = 2;
     */
    uri: string;
    /**
     * 提示信息
     *
     * @generated from protobuf field: string msg = 3;
     */
    msg: string;
}
/**
 *
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.TaskParam
 */
export interface TaskParam {
    /**
     *
     *
     * @generated from protobuf field: string task_type = 1;
     */
    taskType: string;
    /**
     *
     *
     * @generated from protobuf field: int64 activity_id = 2;
     */
    activityId: number;
    /**
     *
     *
     * @generated from protobuf field: int64 tips_id = 3;
     */
    tipsId: number;
}
/**
 *
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.TextInfo
 */
export interface TextInfo {
    /**
     *
     *
     * @generated from protobuf field: string text = 1;
     */
    text: string;
    /**
     *
     *
     * @generated from protobuf field: string text_color = 2;
     */
    textColor: string;
    /**
     *
     *
     * @generated from protobuf field: string text_color_night = 3;
     */
    textColorNight: string;
}
/**
 * Toast信息
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.Toast
 */
export interface Toast {
    /**
     * toast文案
     *
     * @generated from protobuf field: string text = 1;
     */
    text: string;
    /**
     * toast按钮
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.Button button = 2;
     */
    button?: Button;
}
/**
 * 播放页信息-请求: 音视频VOD
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.VideoVod
 */
export interface VideoVod {
    /**
     * 视频aid
     *
     * @generated from protobuf field: int32 aid = 1;
     */
    aid: number;
    /**
     * 视频cid
     *
     * @generated from protobuf field: int32 cid = 2;
     */
    cid: number;
    /**
     * 清晰度
     *
     * @generated from protobuf field: uint64 qn = 3;
     */
    qn: number;
    /**
     * 视频流版本
     *
     * @generated from protobuf field: int32 fnver = 4;
     */
    fnver: number;
    /**
     * 视频流格式
     *
     * @generated from protobuf field: int32 fnval = 5;
     */
    fnval: number;
    /**
     * 下载模式
     * 0:播放 1:flv下载 2:dash下载
     *
     * @generated from protobuf field: uint32 download = 6;
     */
    download: number;
    /**
     * 流url强制是用域名
     * 0:允许使用ip 1:使用http 2:使用https
     *
     * @generated from protobuf field: int32 force_host = 7;
     */
    forceHost: number;
    /**
     * 是否4K
     *
     * @generated from protobuf field: bool fourk = 8;
     */
    fourk: boolean;
    /**
     * 视频编码
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.CodeType prefer_codec_type = 9;
     */
    preferCodecType: CodeType;
    /**
     * 响度均衡
     *
     * @generated from protobuf field: uint64 voice_balance = 10;
     */
    voiceBalance: number;
}
/**
 *
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.ViewInfo
 */
export interface ViewInfo {
    /**
     *
     *
     * @generated from protobuf field: map<string, bilibili.app.playerunite.v1.Dialog> dialog_map = 1;
     */
    dialogMap: {
        [key: string]: Dialog;
    };
    /**
     *
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.PromptBar prompt_bar = 2;
     */
    promptBar?: PromptBar;
    /**
     *
     *
     * @generated from protobuf field: repeated bilibili.app.playerunite.v1.ComprehensiveToast toasts = 3;
     */
    toasts: ComprehensiveToast[];
}
/**
 * 播放页信息-响应: VOD音视频信息
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.VodInfo
 */
export interface VodInfo {
    /**
     * 视频清晰度
     *
     * @generated from protobuf field: uint32 quality = 1;
     */
    quality: number;
    /**
     * 视频格式
     *
     * @generated from protobuf field: string format = 2;
     */
    format: string;
    /**
     * 视频时长
     *
     * @generated from protobuf field: uint64 timelength = 3;
     */
    timelength: number;
    /**
     * 视频编码id
     *
     * @generated from protobuf field: uint32 video_codecid = 4;
     */
    videoCodecid: number;
    /**
     * 视频流
     *
     * @generated from protobuf field: repeated bilibili.app.playerunite.v1.Stream stream_list = 5;
     */
    streamList: Stream[];
    /**
     * 伴音流
     *
     * @generated from protobuf field: repeated bilibili.app.playerunite.v1.DashItem dash_audio = 6;
     */
    dashAudio: DashItem[];
    /**
     * 杜比伴音流
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.DolbyItem dolby = 7;
     */
    dolby?: DolbyItem;
    /**
     * 响度均衡操作信息
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.VolumeInfo volume = 8;
     */
    volume?: VolumeInfo;
    /**
     * HIRES伴音流信息
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.LossLessItem loss_less_item = 9;
     */
    lossLessItem?: LossLessItem;
    /**
     * 是否支持投屏
     *
     * @generated from protobuf field: bool support_project = 10;
     */
    supportProject: boolean;
}
/**
 * 响度均衡操作信息
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.VolumeInfo
 */
export interface VolumeInfo {
    /**
     * Measured integrated loudness 实际综合响度
     *
     * @generated from protobuf field: double measured_i = 1;
     */
    measuredI: number;
    /**
     * Measured loudness range 实际响度范围
     *
     * @generated from protobuf field: double measured_lra = 2;
     */
    measuredLra: number;
    /**
     * Measured true peak 实际响度真峰值
     *
     * @generated from protobuf field: double measured_tp = 3;
     */
    measuredTp: number;
    /**
     * Measured threshold 实际响度阈值
     *
     * @generated from protobuf field: double measured_threshold = 4;
     */
    measuredThreshold: number;
    /**
     * Target offset gain(Gain is applied before the true-peak limiter) 目标增益Offset(增益在真实峰值限制器之前应用)
     *
     * @generated from protobuf field: double target_offset = 5;
     */
    targetOffset: number;
    /**
     * Target integrated loudness 目标综合响度
     *
     * @generated from protobuf field: double target_i = 6;
     */
    targetI: number;
    /**
     * Target true peak 目标响度真峰值
     *
     * @generated from protobuf field: double target_tp = 7;
     */
    targetTp: number;
}
/**
 *
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.PlayViewUniteReq
 */
export interface PlayViewUniteReq {
    /**
     * 请求资源VOD信息
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.VideoVod vod = 1;
     */
    vod?: VideoVod;
    /**
     *
     *
     * @generated from protobuf field: string spmid = 2;
     */
    spmid: string;
    /**
     *
     *
     * @generated from protobuf field: string from_spmid = 3;
     */
    fromSpmid: string;
    /**
     * 补充信息, 如ep_id等
     *
     * @generated from protobuf field: map<string, string> extra_content = 4;
     */
    extraContent: {
        [key: string]: string;
    };
    /**
     *
     *
     * @generated from protobuf field: string bvid = 5;
     */
    bvid: string;
}
/**
 *
 *
 * @generated from protobuf message bilibili.app.playerunite.v1.PlayViewUniteReply
 */
export interface PlayViewUniteReply {
    /**
     * 音视频流信息
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.VodInfo vod_info = 1;
     */
    vodInfo?: VodInfo;
    /**
     *
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.PlayArcConf play_arc_conf = 2;
     */
    playArcConf?: PlayArcConf;
    /**
     *
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.PlayDeviceConf play_device_conf = 3;
     */
    playDeviceConf?: PlayDeviceConf;
    /**
     *
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.Event event = 4;
     */
    event?: Event;
    /**
     * 使用 pgcanymodel / ugcanymodel 进行proto any转换成对应业务码结构体
     *
     * @generated from protobuf field: google.protobuf.Any supplement = 5;
     */
    supplement?: Any;
    /**
     *
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.PlayArc play_arc = 6;
     */
    playArc?: PlayArc;
    /**
     *
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.QnTrialInfo qn_trial_info = 7;
     */
    qnTrialInfo?: QnTrialInfo;
    /**
     *
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.History history = 8;
     */
    history?: History;
    /**
     *
     *
     * @generated from protobuf field: bilibili.app.playerunite.v1.ViewInfo view_info = 9;
     */
    viewInfo?: ViewInfo;
}
/**
 *
 *
 * @generated from protobuf enum bilibili.app.playerunite.v1.ArcType
 */
export enum ArcType {
    /**
     *
     *
     * @generated from protobuf enum value: ARC_TYPE_NORMAL = 0;
     */
    NORMAL = 0,
    /**
     *
     *
     * @generated from protobuf enum value: ARC_TYPE_INTERACT = 1;
     */
    INTERACT = 1
}
/**
 *
 *
 * @generated from protobuf enum bilibili.app.playerunite.v1.BizType
 */
export enum BizType {
    /**
     *
     *
     * @generated from protobuf enum value: BIZ_TYPE_UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     *
     *
     * @generated from protobuf enum value: BIZ_TYPE_UGC = 1;
     */
    UGC = 1,
    /**
     *
     *
     * @generated from protobuf enum value: BIZ_TYPE_PGC = 2;
     */
    PGC = 2,
    /**
     *
     *
     * @generated from protobuf enum value: BIZ_TYPE_PUGV = 3;
     */
    PUGV = 3
}
/**
 * @generated from protobuf enum bilibili.app.playerunite.v1.ButtonAction
 */
export enum ButtonAction {
    /**
     *
     *
     * @generated from protobuf enum value: BUTTON_UNKNOWN = 0;
     */
    BUTTON_UNKNOWN = 0,
    /**
     *
     *
     * @generated from protobuf enum value: PAY = 1;
     */
    PAY = 1,
    /**
     *
     *
     * @generated from protobuf enum value: VIP = 2;
     */
    VIP = 2,
    /**
     *
     *
     * @generated from protobuf enum value: PACK = 3;
     */
    PACK = 3,
    /**
     *
     *
     * @generated from protobuf enum value: LINK = 4;
     */
    LINK = 4,
    /**
     *
     *
     * @generated from protobuf enum value: COUPON = 5;
     */
    COUPON = 5,
    /**
     *
     *
     * @generated from protobuf enum value: DEMAND = 6;
     */
    DEMAND = 6,
    /**
     *
     *
     * @generated from protobuf enum value: DEMAND_PACK = 7;
     */
    DEMAND_PACK = 7,
    /**
     *
     *
     * @generated from protobuf enum value: FOLLOW = 8;
     */
    FOLLOW = 8,
    /**
     *
     *
     * @generated from protobuf enum value: APPOINTMENT = 9;
     */
    APPOINTMENT = 9,
    /**
     *
     *
     * @generated from protobuf enum value: VIP_FREE = 10;
     */
    VIP_FREE = 10,
    /**
     *
     *
     * @generated from protobuf enum value: TASK = 11;
     */
    TASK = 11,
    /**
     *
     *
     * @generated from protobuf enum value: CHARGINGPLUS = 12;
     */
    CHARGINGPLUS = 12,
    /**
     *
     *
     * @generated from protobuf enum value: BP = 13;
     */
    BP = 13,
    /**
     *
     *
     * @generated from protobuf enum value: PRE_SELL = 14;
     */
    PRE_SELL = 14
}
/**
 * 视频编码
 *
 * @generated from protobuf enum bilibili.app.playerunite.v1.CodeType
 */
export enum CodeType {
    /**
     * 不指定
     *
     * @generated from protobuf enum value: NOCODE = 0;
     */
    NOCODE = 0,
    /**
     * H264
     *
     * @generated from protobuf enum value: CODE264 = 1;
     */
    CODE264 = 1,
    /**
     * H265
     *
     * @generated from protobuf enum value: CODE265 = 2;
     */
    CODE265 = 2,
    /**
     * AV1
     *
     * @generated from protobuf enum value: CODEAV1 = 3;
     */
    CODEAV1 = 3
}
/**
 * 功能类型
 *
 * @generated from protobuf enum bilibili.app.playerunite.v1.ConfType
 */
export enum ConfType {
    /**
     * @generated from protobuf enum value: NoType = 0;
     */
    NoType = 0,
    /**
     * @generated from protobuf enum value: FLIPCONF = 1;
     */
    FLIPCONF = 1,
    /**
     * @generated from protobuf enum value: CASTCONF = 2;
     */
    CASTCONF = 2,
    /**
     * @generated from protobuf enum value: FEEDBACK = 3;
     */
    FEEDBACK = 3,
    /**
     * @generated from protobuf enum value: SUBTITLE = 4;
     */
    SUBTITLE = 4,
    /**
     * @generated from protobuf enum value: PLAYBACKRATE = 5;
     */
    PLAYBACKRATE = 5,
    /**
     * @generated from protobuf enum value: TIMEUP = 6;
     */
    TIMEUP = 6,
    /**
     * @generated from protobuf enum value: PLAYBACKMODE = 7;
     */
    PLAYBACKMODE = 7,
    /**
     * @generated from protobuf enum value: SCALEMODE = 8;
     */
    SCALEMODE = 8,
    /**
     * @generated from protobuf enum value: BACKGROUNDPLAY = 9;
     */
    BACKGROUNDPLAY = 9,
    /**
     * @generated from protobuf enum value: LIKE = 10;
     */
    LIKE = 10,
    /**
     * @generated from protobuf enum value: DISLIKE = 11;
     */
    DISLIKE = 11,
    /**
     * @generated from protobuf enum value: COIN = 12;
     */
    COIN = 12,
    /**
     * @generated from protobuf enum value: ELEC = 13;
     */
    ELEC = 13,
    /**
     * @generated from protobuf enum value: SHARE = 14;
     */
    SHARE = 14,
    /**
     * @generated from protobuf enum value: SCREENSHOT = 15;
     */
    SCREENSHOT = 15,
    /**
     * @generated from protobuf enum value: LOCKSCREEN = 16;
     */
    LOCKSCREEN = 16,
    /**
     * @generated from protobuf enum value: RECOMMEND = 17;
     */
    RECOMMEND = 17,
    /**
     * @generated from protobuf enum value: PLAYBACKSPEED = 18;
     */
    PLAYBACKSPEED = 18,
    /**
     * @generated from protobuf enum value: DEFINITION = 19;
     */
    DEFINITION = 19,
    /**
     * @generated from protobuf enum value: SELECTIONS = 20;
     */
    SELECTIONS = 20,
    /**
     * @generated from protobuf enum value: NEXT = 21;
     */
    NEXT = 21,
    /**
     * @generated from protobuf enum value: EDITDM = 22;
     */
    EDITDM = 22,
    /**
     * @generated from protobuf enum value: SMALLWINDOW = 23;
     */
    SMALLWINDOW = 23,
    /**
     * @generated from protobuf enum value: SHAKE = 24;
     */
    SHAKE = 24,
    /**
     * @generated from protobuf enum value: OUTERDM = 25;
     */
    OUTERDM = 25,
    /**
     * @generated from protobuf enum value: INNERDM = 26;
     */
    INNERDM = 26,
    /**
     * @generated from protobuf enum value: PANORAMA = 27;
     */
    PANORAMA = 27,
    /**
     * @generated from protobuf enum value: DOLBY = 28;
     */
    DOLBY = 28,
    /**
     * @generated from protobuf enum value: COLORFILTER = 29;
     */
    COLORFILTER = 29,
    /**
     * @generated from protobuf enum value: LOSSLESS = 30;
     */
    LOSSLESS = 30,
    /**
     * @generated from protobuf enum value: FREYAENTER = 31;
     */
    FREYAENTER = 31,
    /**
     * @generated from protobuf enum value: FREYAFULLENTER = 32;
     */
    FREYAFULLENTER = 32,
    /**
     * @generated from protobuf enum value: SKIPOPED = 33;
     */
    SKIPOPED = 33,
    /**
     * @generated from protobuf enum value: RECORDSCREEN = 34;
     */
    RECORDSCREEN = 34,
    /**
     * @generated from protobuf enum value: DUBBING = 35;
     */
    DUBBING = 35,
    /**
     * @generated from protobuf enum value: LISTEN = 36;
     */
    LISTEN = 36
}
/**
 * DRM类型
 *
 * @generated from protobuf enum bilibili.app.playerunite.v1.DrmTechType
 */
export enum DrmTechType {
    /**
     *
     *
     * @generated from protobuf enum value: UNKNOWN_DRM = 0;
     */
    UNKNOWN_DRM = 0,
    /**
     *
     *
     * @generated from protobuf enum value: FAIR_PLAY = 1;
     */
    FAIR_PLAY = 1,
    /**
     *
     *
     * @generated from protobuf enum value: WIDE_VINE = 2;
     */
    WIDE_VINE = 2,
    /**
     * 哔哩哔哩自研DRM
     *
     * @generated from protobuf enum value: BILI_DRM = 3;
     */
    BILI_DRM = 3
}
/**
 * @generated from protobuf enum bilibili.app.playerunite.v1.Effects
 */
export enum Effects {
    /**
     *
     *
     * @generated from protobuf enum value: EFFECTS_UNKNOWN = 0;
     */
    EFFECTS_UNKNOWN = 0,
    /**
     *
     *
     * @generated from protobuf enum value: GAUSSIAN_BLUR = 1;
     */
    GAUSSIAN_BLUR = 1,
    /**
     *
     *
     * @generated from protobuf enum value: HALF_ALPHA = 2;
     */
    HALF_ALPHA = 2
}
/**
 * @generated from protobuf enum bilibili.app.playerunite.v1.ExtDataType
 */
export enum ExtDataType {
    /**
     *
     *
     * @generated from protobuf enum value: EXT_DATA_TYPE_UNKNOWN = 0;
     */
    EXT_DATA_TYPE_UNKNOWN = 0,
    /**
     *
     *
     * @generated from protobuf enum value: PLAY_LIST = 1;
     */
    PLAY_LIST = 1
}
/**
 *
 *
 * @generated from protobuf enum bilibili.app.playerunite.v1.GuideStyle
 */
export enum GuideStyle {
    /**
     *
     *
     * @generated from protobuf enum value: STYLE_UNKNOWN = 0;
     */
    STYLE_UNKNOWN = 0,
    /**
     *
     *
     * @generated from protobuf enum value: HORIZONTAL_IMAGE = 1;
     */
    HORIZONTAL_IMAGE = 1,
    /**
     *
     *
     * @generated from protobuf enum value: VERTICAL_TEXT = 2;
     */
    VERTICAL_TEXT = 2,
    /**
     *
     *
     * @generated from protobuf enum value: SIMPLE_TEXT = 3;
     */
    SIMPLE_TEXT = 3,
    /**
     *
     *
     * @generated from protobuf enum value: CHARGING_TEXT = 4;
     */
    CHARGING_TEXT = 4
}
/**
 *
 *
 * @generated from protobuf enum bilibili.app.playerunite.v1.LimitActionType
 */
export enum LimitActionType {
    /**
     *
     *
     * @generated from protobuf enum value: LAT_UNKNOWN = 0;
     */
    LAT_UNKNOWN = 0,
    /**
     *
     *
     * @generated from protobuf enum value: SHOW_LIMIT_DIALOG = 1;
     */
    SHOW_LIMIT_DIALOG = 1,
    /**
     *
     *
     * @generated from protobuf enum value: SKIP_CURRENT_EP = 2;
     */
    SKIP_CURRENT_EP = 2
}
/**
 * 错误码
 *
 * @generated from protobuf enum bilibili.app.playerunite.v1.PlayErr
 */
export enum PlayErr {
    /**
     * @generated from protobuf enum value: NoErr = 0;
     */
    NoErr = 0,
    /**
     * 管控类型的错误码
     *
     * @generated from protobuf enum value: WithMultiDeviceLoginErr = 1;
     */
    WithMultiDeviceLoginErr = 1
}
/**
 *
 *
 * @generated from protobuf enum bilibili.app.playerunite.v1.ShowStyleType
 */
export enum ShowStyleType {
    /**
     *
     *
     * @generated from protobuf enum value: SHOW_STYLE_TYPE_UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     *
     *
     * @generated from protobuf enum value: SHOW_STYLE_TYPE_ORDINARY = 1;
     */
    ORDINARY = 1,
    /**
     *
     *
     * @generated from protobuf enum value: SHOW_STYLE_TYPE_RESIDENT = 2;
     */
    RESIDENT = 2
}
/**
 * @generated from protobuf enum bilibili.app.playerunite.v1.ToastType
 */
export enum ToastType {
    /**
     *
     *
     * @generated from protobuf enum value: TOAST_TYPE_UNKNOWN = 0;
     */
    TOAST_TYPE_UNKNOWN = 0,
    /**
     *
     *
     * @generated from protobuf enum value: VIP_CONTENT_REMIND = 1;
     */
    VIP_CONTENT_REMIND = 1,
    /**
     *
     *
     * @generated from protobuf enum value: VIP_DEFINITION_REMIND = 2;
     */
    VIP_DEFINITION_REMIND = 2,
    /**
     *
     *
     * @generated from protobuf enum value: VIP_DEFINITION_GUIDE = 3;
     */
    VIP_DEFINITION_GUIDE = 3,
    /**
     *
     *
     * @generated from protobuf enum value: OGV_VIDEO_START_TOAST = 4;
     */
    OGV_VIDEO_START_TOAST = 4,
    /**
     *
     *
     * @generated from protobuf enum value: CHARGING_TOAST = 5;
     */
    CHARGING_TOAST = 5
}
/**
 *
 *
 * @generated from protobuf enum bilibili.app.playerunite.v1.UnsupportScene
 */
export enum UnsupportScene {
    /**
     *
     *
     * @generated from protobuf enum value: UNKNOWN_SCENE = 0;
     */
    UNKNOWN_SCENE = 0,
    /**
     *
     *
     * @generated from protobuf enum value: PREMIERE = 1;
     */
    PREMIERE = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class ArcConf$Type extends MessageType<ArcConf> {
    constructor() {
        super("bilibili.app.playerunite.v1.ArcConf", [
            { no: 1, name: "is_support", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "disabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "extra_content", kind: "message", T: () => ExtraContent },
            { no: 4, name: "unsupport_scene", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ArcConf>): ArcConf {
        const message = { isSupport: false, disabled: false, unsupportScene: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ArcConf>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ArcConf): ArcConf {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_support */ 1:
                    message.isSupport = reader.bool();
                    break;
                case /* bool disabled */ 2:
                    message.disabled = reader.bool();
                    break;
                case /* bilibili.app.playerunite.v1.ExtraContent extra_content */ 3:
                    message.extraContent = ExtraContent.internalBinaryRead(reader, reader.uint32(), options, message.extraContent);
                    break;
                case /* repeated int32 unsupport_scene */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unsupportScene.push(reader.int32());
                    else
                        message.unsupportScene.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ArcConf, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_support = 1; */
        if (message.isSupport !== false)
            writer.tag(1, WireType.Varint).bool(message.isSupport);
        /* bool disabled = 2; */
        if (message.disabled !== false)
            writer.tag(2, WireType.Varint).bool(message.disabled);
        /* bilibili.app.playerunite.v1.ExtraContent extra_content = 3; */
        if (message.extraContent)
            ExtraContent.internalBinaryWrite(message.extraContent, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated int32 unsupport_scene = 4; */
        if (message.unsupportScene.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.unsupportScene.length; i++)
                writer.int32(message.unsupportScene[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.ArcConf
 */
export const ArcConf = new ArcConf$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BackgroundInfo$Type extends MessageType<BackgroundInfo> {
    constructor() {
        super("bilibili.app.playerunite.v1.BackgroundInfo", [
            { no: 1, name: "drawable_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "drawable_bitmap_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "effects", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<BackgroundInfo>): BackgroundInfo {
        const message = { drawableColor: "", drawableBitmapUrl: "", effects: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BackgroundInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BackgroundInfo): BackgroundInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string drawable_color */ 1:
                    message.drawableColor = reader.string();
                    break;
                case /* string drawable_bitmap_url */ 2:
                    message.drawableBitmapUrl = reader.string();
                    break;
                case /* int32 effects */ 3:
                    message.effects = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BackgroundInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string drawable_color = 1; */
        if (message.drawableColor !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.drawableColor);
        /* string drawable_bitmap_url = 2; */
        if (message.drawableBitmapUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.drawableBitmapUrl);
        /* int32 effects = 3; */
        if (message.effects !== 0)
            writer.tag(3, WireType.Varint).int32(message.effects);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.BackgroundInfo
 */
export const BackgroundInfo = new BackgroundInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BadgeInfo$Type extends MessageType<BadgeInfo> {
    constructor() {
        super("bilibili.app.playerunite.v1.BadgeInfo", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "bg_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "bg_color_night", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "text_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "bg_gradient_color", kind: "message", T: () => GradientColor },
            { no: 6, name: "img", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BadgeInfo>): BadgeInfo {
        const message = { text: "", bgColor: "", bgColorNight: "", textColor: "", img: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BadgeInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BadgeInfo): BadgeInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* string bg_color */ 2:
                    message.bgColor = reader.string();
                    break;
                case /* string bg_color_night */ 3:
                    message.bgColorNight = reader.string();
                    break;
                case /* string text_color */ 4:
                    message.textColor = reader.string();
                    break;
                case /* bilibili.app.playerunite.v1.GradientColor bg_gradient_color */ 5:
                    message.bgGradientColor = GradientColor.internalBinaryRead(reader, reader.uint32(), options, message.bgGradientColor);
                    break;
                case /* string img */ 6:
                    message.img = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BadgeInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* string bg_color = 2; */
        if (message.bgColor !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.bgColor);
        /* string bg_color_night = 3; */
        if (message.bgColorNight !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.bgColorNight);
        /* string text_color = 4; */
        if (message.textColor !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.textColor);
        /* bilibili.app.playerunite.v1.GradientColor bg_gradient_color = 5; */
        if (message.bgGradientColor)
            GradientColor.internalBinaryWrite(message.bgGradientColor, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string img = 6; */
        if (message.img !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.img);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.BadgeInfo
 */
export const BadgeInfo = new BadgeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BottomDisplay$Type extends MessageType<BottomDisplay> {
    constructor() {
        super("bilibili.app.playerunite.v1.BottomDisplay", [
            { no: 1, name: "title", kind: "message", T: () => TextInfo },
            { no: 2, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BottomDisplay>): BottomDisplay {
        const message = { icon: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BottomDisplay>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BottomDisplay): BottomDisplay {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.playerunite.v1.TextInfo title */ 1:
                    message.title = TextInfo.internalBinaryRead(reader, reader.uint32(), options, message.title);
                    break;
                case /* string icon */ 2:
                    message.icon = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BottomDisplay, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bilibili.app.playerunite.v1.TextInfo title = 1; */
        if (message.title)
            TextInfo.internalBinaryWrite(message.title, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string icon = 2; */
        if (message.icon !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.icon);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.BottomDisplay
 */
export const BottomDisplay = new BottomDisplay$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Button$Type extends MessageType<Button> {
    constructor() {
        super("bilibili.app.playerunite.v1.Button", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "link", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "report_params", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<Button>): Button {
        const message = { text: "", link: "", reportParams: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Button>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Button): Button {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* string link */ 2:
                    message.link = reader.string();
                    break;
                case /* map<string, string> report_params */ 3:
                    this.binaryReadMap3(message.reportParams, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: Button["reportParams"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof Button["reportParams"] | undefined, val: Button["reportParams"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.app.playerunite.v1.Button.report_params");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: Button, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* string link = 2; */
        if (message.link !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.link);
        /* map<string, string> report_params = 3; */
        for (let k of Object.keys(message.reportParams))
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.reportParams[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.Button
 */
export const Button = new Button$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ButtonInfo$Type extends MessageType<ButtonInfo> {
    constructor() {
        super("bilibili.app.playerunite.v1.ButtonInfo", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "text_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "text_color_night", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "bg_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "bg_color_night", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "link", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "action_type", kind: "enum", T: () => ["bilibili.app.playerunite.v1.ButtonAction", ButtonAction] },
            { no: 8, name: "badge_info", kind: "message", T: () => BadgeInfo },
            { no: 9, name: "report", kind: "message", T: () => Report },
            { no: 10, name: "left_strikethrough_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "simple_text_info", kind: "message", T: () => TextInfo },
            { no: 12, name: "simple_bg_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "simple_bg_color_night", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "bg_gradient_color", kind: "message", T: () => GradientColor },
            { no: 15, name: "order_report_params", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 16, name: "task_param", kind: "message", T: () => TaskParam },
            { no: 17, name: "frame_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 18, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ButtonInfo>): ButtonInfo {
        const message = { text: "", textColor: "", textColorNight: "", bgColor: "", bgColorNight: "", link: "", actionType: 0, leftStrikethroughText: "", simpleBgColor: "", simpleBgColorNight: "", orderReportParams: {}, frameColor: "", icon: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ButtonInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ButtonInfo): ButtonInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* string text_color */ 2:
                    message.textColor = reader.string();
                    break;
                case /* string text_color_night */ 3:
                    message.textColorNight = reader.string();
                    break;
                case /* string bg_color */ 4:
                    message.bgColor = reader.string();
                    break;
                case /* string bg_color_night */ 5:
                    message.bgColorNight = reader.string();
                    break;
                case /* string link */ 6:
                    message.link = reader.string();
                    break;
                case /* bilibili.app.playerunite.v1.ButtonAction action_type */ 7:
                    message.actionType = reader.int32();
                    break;
                case /* bilibili.app.playerunite.v1.BadgeInfo badge_info */ 8:
                    message.badgeInfo = BadgeInfo.internalBinaryRead(reader, reader.uint32(), options, message.badgeInfo);
                    break;
                case /* bilibili.app.playerunite.v1.Report report */ 9:
                    message.report = Report.internalBinaryRead(reader, reader.uint32(), options, message.report);
                    break;
                case /* string left_strikethrough_text */ 10:
                    message.leftStrikethroughText = reader.string();
                    break;
                case /* bilibili.app.playerunite.v1.TextInfo simple_text_info */ 11:
                    message.simpleTextInfo = TextInfo.internalBinaryRead(reader, reader.uint32(), options, message.simpleTextInfo);
                    break;
                case /* string simple_bg_color */ 12:
                    message.simpleBgColor = reader.string();
                    break;
                case /* string simple_bg_color_night */ 13:
                    message.simpleBgColorNight = reader.string();
                    break;
                case /* bilibili.app.playerunite.v1.GradientColor bg_gradient_color */ 14:
                    message.bgGradientColor = GradientColor.internalBinaryRead(reader, reader.uint32(), options, message.bgGradientColor);
                    break;
                case /* map<string, string> order_report_params */ 15:
                    this.binaryReadMap15(message.orderReportParams, reader, options);
                    break;
                case /* bilibili.app.playerunite.v1.TaskParam task_param */ 16:
                    message.taskParam = TaskParam.internalBinaryRead(reader, reader.uint32(), options, message.taskParam);
                    break;
                case /* string frame_color */ 17:
                    message.frameColor = reader.string();
                    break;
                case /* string icon */ 18:
                    message.icon = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap15(map: ButtonInfo["orderReportParams"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ButtonInfo["orderReportParams"] | undefined, val: ButtonInfo["orderReportParams"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.app.playerunite.v1.ButtonInfo.order_report_params");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: ButtonInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* string text_color = 2; */
        if (message.textColor !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.textColor);
        /* string text_color_night = 3; */
        if (message.textColorNight !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.textColorNight);
        /* string bg_color = 4; */
        if (message.bgColor !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.bgColor);
        /* string bg_color_night = 5; */
        if (message.bgColorNight !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.bgColorNight);
        /* string link = 6; */
        if (message.link !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.link);
        /* bilibili.app.playerunite.v1.ButtonAction action_type = 7; */
        if (message.actionType !== 0)
            writer.tag(7, WireType.Varint).int32(message.actionType);
        /* bilibili.app.playerunite.v1.BadgeInfo badge_info = 8; */
        if (message.badgeInfo)
            BadgeInfo.internalBinaryWrite(message.badgeInfo, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playerunite.v1.Report report = 9; */
        if (message.report)
            Report.internalBinaryWrite(message.report, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* string left_strikethrough_text = 10; */
        if (message.leftStrikethroughText !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.leftStrikethroughText);
        /* bilibili.app.playerunite.v1.TextInfo simple_text_info = 11; */
        if (message.simpleTextInfo)
            TextInfo.internalBinaryWrite(message.simpleTextInfo, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* string simple_bg_color = 12; */
        if (message.simpleBgColor !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.simpleBgColor);
        /* string simple_bg_color_night = 13; */
        if (message.simpleBgColorNight !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.simpleBgColorNight);
        /* bilibili.app.playerunite.v1.GradientColor bg_gradient_color = 14; */
        if (message.bgGradientColor)
            GradientColor.internalBinaryWrite(message.bgGradientColor, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* map<string, string> order_report_params = 15; */
        for (let k of Object.keys(message.orderReportParams))
            writer.tag(15, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.orderReportParams[k]).join();
        /* bilibili.app.playerunite.v1.TaskParam task_param = 16; */
        if (message.taskParam)
            TaskParam.internalBinaryWrite(message.taskParam, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* string frame_color = 17; */
        if (message.frameColor !== "")
            writer.tag(17, WireType.LengthDelimited).string(message.frameColor);
        /* string icon = 18; */
        if (message.icon !== "")
            writer.tag(18, WireType.LengthDelimited).string(message.icon);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.ButtonInfo
 */
export const ButtonInfo = new ButtonInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ComprehensiveToast$Type extends MessageType<ComprehensiveToast> {
    constructor() {
        super("bilibili.app.playerunite.v1.ComprehensiveToast", [
            { no: 1, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "button", kind: "message", T: () => ButtonInfo },
            { no: 3, name: "show_style_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "toast_text", kind: "message", T: () => TextInfo },
            { no: 6, name: "report", kind: "message", T: () => Report },
            { no: 7, name: "order_report_params", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<ComprehensiveToast>): ComprehensiveToast {
        const message = { type: 0, showStyleType: 0, icon: "", orderReportParams: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ComprehensiveToast>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ComprehensiveToast): ComprehensiveToast {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 type */ 1:
                    message.type = reader.int32();
                    break;
                case /* bilibili.app.playerunite.v1.ButtonInfo button */ 2:
                    message.button = ButtonInfo.internalBinaryRead(reader, reader.uint32(), options, message.button);
                    break;
                case /* int32 show_style_type */ 3:
                    message.showStyleType = reader.int32();
                    break;
                case /* string icon */ 4:
                    message.icon = reader.string();
                    break;
                case /* bilibili.app.playerunite.v1.TextInfo toast_text */ 5:
                    message.toastText = TextInfo.internalBinaryRead(reader, reader.uint32(), options, message.toastText);
                    break;
                case /* bilibili.app.playerunite.v1.Report report */ 6:
                    message.report = Report.internalBinaryRead(reader, reader.uint32(), options, message.report);
                    break;
                case /* map<string, string> order_report_params */ 7:
                    this.binaryReadMap7(message.orderReportParams, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap7(map: ComprehensiveToast["orderReportParams"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ComprehensiveToast["orderReportParams"] | undefined, val: ComprehensiveToast["orderReportParams"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.app.playerunite.v1.ComprehensiveToast.order_report_params");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: ComprehensiveToast, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* bilibili.app.playerunite.v1.ButtonInfo button = 2; */
        if (message.button)
            ButtonInfo.internalBinaryWrite(message.button, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 show_style_type = 3; */
        if (message.showStyleType !== 0)
            writer.tag(3, WireType.Varint).int32(message.showStyleType);
        /* string icon = 4; */
        if (message.icon !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.icon);
        /* bilibili.app.playerunite.v1.TextInfo toast_text = 5; */
        if (message.toastText)
            TextInfo.internalBinaryWrite(message.toastText, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playerunite.v1.Report report = 6; */
        if (message.report)
            Report.internalBinaryWrite(message.report, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* map<string, string> order_report_params = 7; */
        for (let k of Object.keys(message.orderReportParams))
            writer.tag(7, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.orderReportParams[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.ComprehensiveToast
 */
export const ComprehensiveToast = new ComprehensiveToast$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConfValue$Type extends MessageType<ConfValue> {
    constructor() {
        super("bilibili.app.playerunite.v1.ConfValue", [
            { no: 1, name: "switch_val", kind: "scalar", oneof: "value", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "selected_val", kind: "scalar", oneof: "value", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ConfValue>): ConfValue {
        const message = { value: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ConfValue>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConfValue): ConfValue {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 switch_val */ 1:
                    message.value = {
                        oneofKind: "switchVal",
                        switchVal: reader.int32()
                    };
                    break;
                case /* int32 selected_val */ 2:
                    message.value = {
                        oneofKind: "selectedVal",
                        selectedVal: reader.int32()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConfValue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 switch_val = 1; */
        if (message.value.oneofKind === "switchVal")
            writer.tag(1, WireType.Varint).int32(message.value.switchVal);
        /* int32 selected_val = 2; */
        if (message.value.oneofKind === "selectedVal")
            writer.tag(2, WireType.Varint).int32(message.value.selectedVal);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.ConfValue
 */
export const ConfValue = new ConfValue$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DashItem$Type extends MessageType<DashItem> {
    constructor() {
        super("bilibili.app.playerunite.v1.DashItem", [
            { no: 1, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "base_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "backup_url", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "bandwidth", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "codecid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "md5", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "size", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 8, name: "frame_rate", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "widevine_pssh", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DashItem>): DashItem {
        const message = { id: 0, baseUrl: "", backupUrl: [], bandwidth: 0, codecid: 0, md5: "", size: 0, frameRate: "", widevinePssh: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DashItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DashItem): DashItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* string base_url */ 2:
                    message.baseUrl = reader.string();
                    break;
                case /* repeated string backup_url */ 3:
                    message.backupUrl.push(reader.string());
                    break;
                case /* uint32 bandwidth */ 4:
                    message.bandwidth = reader.uint32();
                    break;
                case /* uint32 codecid */ 5:
                    message.codecid = reader.uint32();
                    break;
                case /* string md5 */ 6:
                    message.md5 = reader.string();
                    break;
                case /* uint64 size */ 7:
                    message.size = reader.uint64().toNumber();
                    break;
                case /* string frame_rate */ 8:
                    message.frameRate = reader.string();
                    break;
                case /* string widevine_pssh */ 9:
                    message.widevinePssh = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DashItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* string base_url = 2; */
        if (message.baseUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.baseUrl);
        /* repeated string backup_url = 3; */
        for (let i = 0; i < message.backupUrl.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.backupUrl[i]);
        /* uint32 bandwidth = 4; */
        if (message.bandwidth !== 0)
            writer.tag(4, WireType.Varint).uint32(message.bandwidth);
        /* uint32 codecid = 5; */
        if (message.codecid !== 0)
            writer.tag(5, WireType.Varint).uint32(message.codecid);
        /* string md5 = 6; */
        if (message.md5 !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.md5);
        /* uint64 size = 7; */
        if (message.size !== 0)
            writer.tag(7, WireType.Varint).uint64(message.size);
        /* string frame_rate = 8; */
        if (message.frameRate !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.frameRate);
        /* string widevine_pssh = 9; */
        if (message.widevinePssh !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.widevinePssh);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.DashItem
 */
export const DashItem = new DashItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DashVideo$Type extends MessageType<DashVideo> {
    constructor() {
        super("bilibili.app.playerunite.v1.DashVideo", [
            { no: 1, name: "base_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "backup_url", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "bandwidth", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "codecid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "md5", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "size", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 7, name: "audio_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "no_rexcode", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "frame_rate", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "width", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "height", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "widevine_pssh", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DashVideo>): DashVideo {
        const message = { baseUrl: "", backupUrl: [], bandwidth: 0, codecid: 0, md5: "", size: 0, audioId: 0, noRexcode: false, frameRate: "", width: 0, height: 0, widevinePssh: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DashVideo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DashVideo): DashVideo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string base_url */ 1:
                    message.baseUrl = reader.string();
                    break;
                case /* repeated string backup_url */ 2:
                    message.backupUrl.push(reader.string());
                    break;
                case /* uint32 bandwidth */ 3:
                    message.bandwidth = reader.uint32();
                    break;
                case /* uint32 codecid */ 4:
                    message.codecid = reader.uint32();
                    break;
                case /* string md5 */ 5:
                    message.md5 = reader.string();
                    break;
                case /* uint64 size */ 6:
                    message.size = reader.uint64().toNumber();
                    break;
                case /* uint32 audio_id */ 7:
                    message.audioId = reader.uint32();
                    break;
                case /* bool no_rexcode */ 8:
                    message.noRexcode = reader.bool();
                    break;
                case /* string frame_rate */ 9:
                    message.frameRate = reader.string();
                    break;
                case /* int32 width */ 10:
                    message.width = reader.int32();
                    break;
                case /* int32 height */ 11:
                    message.height = reader.int32();
                    break;
                case /* string widevine_pssh */ 12:
                    message.widevinePssh = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DashVideo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string base_url = 1; */
        if (message.baseUrl !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.baseUrl);
        /* repeated string backup_url = 2; */
        for (let i = 0; i < message.backupUrl.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.backupUrl[i]);
        /* uint32 bandwidth = 3; */
        if (message.bandwidth !== 0)
            writer.tag(3, WireType.Varint).uint32(message.bandwidth);
        /* uint32 codecid = 4; */
        if (message.codecid !== 0)
            writer.tag(4, WireType.Varint).uint32(message.codecid);
        /* string md5 = 5; */
        if (message.md5 !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.md5);
        /* uint64 size = 6; */
        if (message.size !== 0)
            writer.tag(6, WireType.Varint).uint64(message.size);
        /* uint32 audio_id = 7; */
        if (message.audioId !== 0)
            writer.tag(7, WireType.Varint).uint32(message.audioId);
        /* bool no_rexcode = 8; */
        if (message.noRexcode !== false)
            writer.tag(8, WireType.Varint).bool(message.noRexcode);
        /* string frame_rate = 9; */
        if (message.frameRate !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.frameRate);
        /* int32 width = 10; */
        if (message.width !== 0)
            writer.tag(10, WireType.Varint).int32(message.width);
        /* int32 height = 11; */
        if (message.height !== 0)
            writer.tag(11, WireType.Varint).int32(message.height);
        /* string widevine_pssh = 12; */
        if (message.widevinePssh !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.widevinePssh);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.DashVideo
 */
export const DashVideo = new DashVideo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeviceConf$Type extends MessageType<DeviceConf> {
    constructor() {
        super("bilibili.app.playerunite.v1.DeviceConf", [
            { no: 1, name: "conf_value", kind: "message", T: () => ConfValue }
        ]);
    }
    create(value?: PartialMessage<DeviceConf>): DeviceConf {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeviceConf>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeviceConf): DeviceConf {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.playerunite.v1.ConfValue conf_value */ 1:
                    message.confValue = ConfValue.internalBinaryRead(reader, reader.uint32(), options, message.confValue);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeviceConf, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bilibili.app.playerunite.v1.ConfValue conf_value = 1; */
        if (message.confValue)
            ConfValue.internalBinaryWrite(message.confValue, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.DeviceConf
 */
export const DeviceConf = new DeviceConf$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Dialog$Type extends MessageType<Dialog> {
    constructor() {
        super("bilibili.app.playerunite.v1.Dialog", [
            { no: 1, name: "style_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "background_info", kind: "message", T: () => BackgroundInfo },
            { no: 3, name: "title", kind: "message", T: () => TextInfo },
            { no: 4, name: "subtitle", kind: "message", T: () => TextInfo },
            { no: 5, name: "image", kind: "message", T: () => ImageInfo },
            { no: 6, name: "button", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ButtonInfo },
            { no: 7, name: "bottom_desc", kind: "message", T: () => ButtonInfo },
            { no: 8, name: "report", kind: "message", T: () => Report },
            { no: 9, name: "count_down_sec", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "right_bottom_desc", kind: "message", T: () => TextInfo },
            { no: 11, name: "bottom_display", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BottomDisplay },
            { no: 12, name: "ext_data", kind: "message", T: () => ExtData },
            { no: 13, name: "limit_action_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Dialog>): Dialog {
        const message = { styleType: 0, button: [], countDownSec: 0, bottomDisplay: [], limitActionType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Dialog>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Dialog): Dialog {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 style_type */ 1:
                    message.styleType = reader.int32();
                    break;
                case /* bilibili.app.playerunite.v1.BackgroundInfo background_info */ 2:
                    message.backgroundInfo = BackgroundInfo.internalBinaryRead(reader, reader.uint32(), options, message.backgroundInfo);
                    break;
                case /* bilibili.app.playerunite.v1.TextInfo title */ 3:
                    message.title = TextInfo.internalBinaryRead(reader, reader.uint32(), options, message.title);
                    break;
                case /* bilibili.app.playerunite.v1.TextInfo subtitle */ 4:
                    message.subtitle = TextInfo.internalBinaryRead(reader, reader.uint32(), options, message.subtitle);
                    break;
                case /* bilibili.app.playerunite.v1.ImageInfo image */ 5:
                    message.image = ImageInfo.internalBinaryRead(reader, reader.uint32(), options, message.image);
                    break;
                case /* repeated bilibili.app.playerunite.v1.ButtonInfo button */ 6:
                    message.button.push(ButtonInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.app.playerunite.v1.ButtonInfo bottom_desc */ 7:
                    message.bottomDesc = ButtonInfo.internalBinaryRead(reader, reader.uint32(), options, message.bottomDesc);
                    break;
                case /* bilibili.app.playerunite.v1.Report report */ 8:
                    message.report = Report.internalBinaryRead(reader, reader.uint32(), options, message.report);
                    break;
                case /* int32 count_down_sec */ 9:
                    message.countDownSec = reader.int32();
                    break;
                case /* bilibili.app.playerunite.v1.TextInfo right_bottom_desc */ 10:
                    message.rightBottomDesc = TextInfo.internalBinaryRead(reader, reader.uint32(), options, message.rightBottomDesc);
                    break;
                case /* repeated bilibili.app.playerunite.v1.BottomDisplay bottom_display */ 11:
                    message.bottomDisplay.push(BottomDisplay.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.app.playerunite.v1.ExtData ext_data */ 12:
                    message.extData = ExtData.internalBinaryRead(reader, reader.uint32(), options, message.extData);
                    break;
                case /* int32 limit_action_type */ 13:
                    message.limitActionType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Dialog, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 style_type = 1; */
        if (message.styleType !== 0)
            writer.tag(1, WireType.Varint).int32(message.styleType);
        /* bilibili.app.playerunite.v1.BackgroundInfo background_info = 2; */
        if (message.backgroundInfo)
            BackgroundInfo.internalBinaryWrite(message.backgroundInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playerunite.v1.TextInfo title = 3; */
        if (message.title)
            TextInfo.internalBinaryWrite(message.title, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playerunite.v1.TextInfo subtitle = 4; */
        if (message.subtitle)
            TextInfo.internalBinaryWrite(message.subtitle, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playerunite.v1.ImageInfo image = 5; */
        if (message.image)
            ImageInfo.internalBinaryWrite(message.image, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.app.playerunite.v1.ButtonInfo button = 6; */
        for (let i = 0; i < message.button.length; i++)
            ButtonInfo.internalBinaryWrite(message.button[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playerunite.v1.ButtonInfo bottom_desc = 7; */
        if (message.bottomDesc)
            ButtonInfo.internalBinaryWrite(message.bottomDesc, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playerunite.v1.Report report = 8; */
        if (message.report)
            Report.internalBinaryWrite(message.report, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* int32 count_down_sec = 9; */
        if (message.countDownSec !== 0)
            writer.tag(9, WireType.Varint).int32(message.countDownSec);
        /* bilibili.app.playerunite.v1.TextInfo right_bottom_desc = 10; */
        if (message.rightBottomDesc)
            TextInfo.internalBinaryWrite(message.rightBottomDesc, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.app.playerunite.v1.BottomDisplay bottom_display = 11; */
        for (let i = 0; i < message.bottomDisplay.length; i++)
            BottomDisplay.internalBinaryWrite(message.bottomDisplay[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playerunite.v1.ExtData ext_data = 12; */
        if (message.extData)
            ExtData.internalBinaryWrite(message.extData, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* int32 limit_action_type = 13; */
        if (message.limitActionType !== 0)
            writer.tag(13, WireType.Varint).int32(message.limitActionType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.Dialog
 */
export const Dialog = new Dialog$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Dimension$Type extends MessageType<Dimension> {
    constructor() {
        super("bilibili.app.playerunite.v1.Dimension", [
            { no: 1, name: "width", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "height", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "rotate", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Dimension>): Dimension {
        const message = { width: 0, height: 0, rotate: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Dimension>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Dimension): Dimension {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 width */ 1:
                    message.width = reader.int32();
                    break;
                case /* int32 height */ 2:
                    message.height = reader.int32();
                    break;
                case /* int32 rotate */ 3:
                    message.rotate = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Dimension, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 width = 1; */
        if (message.width !== 0)
            writer.tag(1, WireType.Varint).int32(message.width);
        /* int32 height = 2; */
        if (message.height !== 0)
            writer.tag(2, WireType.Varint).int32(message.height);
        /* int32 rotate = 3; */
        if (message.rotate !== 0)
            writer.tag(3, WireType.Varint).int32(message.rotate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.Dimension
 */
export const Dimension = new Dimension$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DolbyItem$Type extends MessageType<DolbyItem> {
    constructor() {
        super("bilibili.app.playerunite.v1.DolbyItem", [
            { no: 1, name: "type", kind: "enum", T: () => ["bilibili.app.playerunite.v1.DolbyItem.Type", DolbyItem_Type] },
            { no: 2, name: "audio", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DashItem }
        ]);
    }
    create(value?: PartialMessage<DolbyItem>): DolbyItem {
        const message = { type: 0, audio: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DolbyItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DolbyItem): DolbyItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.playerunite.v1.DolbyItem.Type type */ 1:
                    message.type = reader.int32();
                    break;
                case /* repeated bilibili.app.playerunite.v1.DashItem audio */ 2:
                    message.audio.push(DashItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DolbyItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bilibili.app.playerunite.v1.DolbyItem.Type type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* repeated bilibili.app.playerunite.v1.DashItem audio = 2; */
        for (let i = 0; i < message.audio.length; i++)
            DashItem.internalBinaryWrite(message.audio[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.DolbyItem
 */
export const DolbyItem = new DolbyItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event$Type extends MessageType<Event> {
    constructor() {
        super("bilibili.app.playerunite.v1.Event", [
            { no: 1, name: "shake", kind: "message", T: () => Shake }
        ]);
    }
    create(value?: PartialMessage<Event>): Event {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Event>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event): Event {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.playerunite.v1.Shake shake */ 1:
                    message.shake = Shake.internalBinaryRead(reader, reader.uint32(), options, message.shake);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Event, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bilibili.app.playerunite.v1.Shake shake = 1; */
        if (message.shake)
            Shake.internalBinaryWrite(message.shake, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.Event
 */
export const Event = new Event$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExtData$Type extends MessageType<ExtData> {
    constructor() {
        super("bilibili.app.playerunite.v1.ExtData", [
            { no: 1, name: "type", kind: "enum", T: () => ["bilibili.app.playerunite.v1.ExtDataType", ExtDataType] },
            { no: 2, name: "play_list_info", kind: "message", oneof: "data", T: () => PlayListInfo }
        ]);
    }
    create(value?: PartialMessage<ExtData>): ExtData {
        const message = { type: 0, data: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ExtData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExtData): ExtData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.playerunite.v1.ExtDataType type */ 1:
                    message.type = reader.int32();
                    break;
                case /* bilibili.app.playerunite.v1.PlayListInfo play_list_info */ 2:
                    message.data = {
                        oneofKind: "playListInfo",
                        playListInfo: PlayListInfo.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).playListInfo)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExtData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bilibili.app.playerunite.v1.ExtDataType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* bilibili.app.playerunite.v1.PlayListInfo play_list_info = 2; */
        if (message.data.oneofKind === "playListInfo")
            PlayListInfo.internalBinaryWrite(message.data.playListInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.ExtData
 */
export const ExtData = new ExtData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExtraContent$Type extends MessageType<ExtraContent> {
    constructor() {
        super("bilibili.app.playerunite.v1.ExtraContent", [
            { no: 1, name: "disable_reason", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "disable_code", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<ExtraContent>): ExtraContent {
        const message = { disableReason: "", disableCode: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ExtraContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExtraContent): ExtraContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string disable_reason */ 1:
                    message.disableReason = reader.string();
                    break;
                case /* int64 disable_code */ 2:
                    message.disableCode = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExtraContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string disable_reason = 1; */
        if (message.disableReason !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.disableReason);
        /* int64 disable_code = 2; */
        if (message.disableCode !== 0)
            writer.tag(2, WireType.Varint).int64(message.disableCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.ExtraContent
 */
export const ExtraContent = new ExtraContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GradientColor$Type extends MessageType<GradientColor> {
    constructor() {
        super("bilibili.app.playerunite.v1.GradientColor", [
            { no: 1, name: "start_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "end_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GradientColor>): GradientColor {
        const message = { startColor: "", endColor: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GradientColor>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GradientColor): GradientColor {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string start_color */ 1:
                    message.startColor = reader.string();
                    break;
                case /* string end_color */ 2:
                    message.endColor = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GradientColor, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string start_color = 1; */
        if (message.startColor !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.startColor);
        /* string end_color = 2; */
        if (message.endColor !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.endColor);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.GradientColor
 */
export const GradientColor = new GradientColor$Type();
// @generated message type with reflection information, may provide speed optimized methods
class History$Type extends MessageType<History> {
    constructor() {
        super("bilibili.app.playerunite.v1.History", [
            { no: 1, name: "current_video", kind: "message", T: () => HistoryInfo },
            { no: 2, name: "related_video", kind: "message", T: () => HistoryInfo }
        ]);
    }
    create(value?: PartialMessage<History>): History {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<History>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: History): History {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.playerunite.v1.HistoryInfo current_video */ 1:
                    message.currentVideo = HistoryInfo.internalBinaryRead(reader, reader.uint32(), options, message.currentVideo);
                    break;
                case /* bilibili.app.playerunite.v1.HistoryInfo related_video */ 2:
                    message.relatedVideo = HistoryInfo.internalBinaryRead(reader, reader.uint32(), options, message.relatedVideo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: History, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bilibili.app.playerunite.v1.HistoryInfo current_video = 1; */
        if (message.currentVideo)
            HistoryInfo.internalBinaryWrite(message.currentVideo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playerunite.v1.HistoryInfo related_video = 2; */
        if (message.relatedVideo)
            HistoryInfo.internalBinaryWrite(message.relatedVideo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.History
 */
export const History = new History$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HistoryInfo$Type extends MessageType<HistoryInfo> {
    constructor() {
        super("bilibili.app.playerunite.v1.HistoryInfo", [
            { no: 1, name: "progress", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "last_play_cid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "toast", kind: "message", T: () => Toast },
            { no: 4, name: "toast_without_time", kind: "message", T: () => Toast },
            { no: 5, name: "last_play_aid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<HistoryInfo>): HistoryInfo {
        const message = { progress: 0, lastPlayCid: 0, lastPlayAid: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HistoryInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HistoryInfo): HistoryInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 progress */ 1:
                    message.progress = reader.int64().toNumber();
                    break;
                case /* int64 last_play_cid */ 2:
                    message.lastPlayCid = reader.int64().toNumber();
                    break;
                case /* bilibili.app.playerunite.v1.Toast toast */ 3:
                    message.toast = Toast.internalBinaryRead(reader, reader.uint32(), options, message.toast);
                    break;
                case /* bilibili.app.playerunite.v1.Toast toast_without_time */ 4:
                    message.toastWithoutTime = Toast.internalBinaryRead(reader, reader.uint32(), options, message.toastWithoutTime);
                    break;
                case /* int64 last_play_aid */ 5:
                    message.lastPlayAid = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HistoryInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 progress = 1; */
        if (message.progress !== 0)
            writer.tag(1, WireType.Varint).int64(message.progress);
        /* int64 last_play_cid = 2; */
        if (message.lastPlayCid !== 0)
            writer.tag(2, WireType.Varint).int64(message.lastPlayCid);
        /* bilibili.app.playerunite.v1.Toast toast = 3; */
        if (message.toast)
            Toast.internalBinaryWrite(message.toast, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playerunite.v1.Toast toast_without_time = 4; */
        if (message.toastWithoutTime)
            Toast.internalBinaryWrite(message.toastWithoutTime, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int64 last_play_aid = 5; */
        if (message.lastPlayAid !== 0)
            writer.tag(5, WireType.Varint).int64(message.lastPlayAid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.HistoryInfo
 */
export const HistoryInfo = new HistoryInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ImageInfo$Type extends MessageType<ImageInfo> {
    constructor() {
        super("bilibili.app.playerunite.v1.ImageInfo", [
            { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ImageInfo>): ImageInfo {
        const message = { url: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ImageInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ImageInfo): ImageInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url */ 1:
                    message.url = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ImageInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string url = 1; */
        if (message.url !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.url);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.ImageInfo
 */
export const ImageInfo = new ImageInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Interaction$Type extends MessageType<Interaction> {
    constructor() {
        super("bilibili.app.playerunite.v1.Interaction", [
            { no: 1, name: "history_node", kind: "message", T: () => Node },
            { no: 2, name: "graph_version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "msg", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "mark", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<Interaction>): Interaction {
        const message = { graphVersion: 0, msg: "", mark: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Interaction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Interaction): Interaction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.playerunite.v1.Node history_node */ 1:
                    message.historyNode = Node.internalBinaryRead(reader, reader.uint32(), options, message.historyNode);
                    break;
                case /* int64 graph_version */ 2:
                    message.graphVersion = reader.int64().toNumber();
                    break;
                case /* string msg */ 3:
                    message.msg = reader.string();
                    break;
                case /* int64 mark */ 4:
                    message.mark = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Interaction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bilibili.app.playerunite.v1.Node history_node = 1; */
        if (message.historyNode)
            Node.internalBinaryWrite(message.historyNode, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 graph_version = 2; */
        if (message.graphVersion !== 0)
            writer.tag(2, WireType.Varint).int64(message.graphVersion);
        /* string msg = 3; */
        if (message.msg !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.msg);
        /* int64 mark = 4; */
        if (message.mark !== 0)
            writer.tag(4, WireType.Varint).int64(message.mark);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.Interaction
 */
export const Interaction = new Interaction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LossLessItem$Type extends MessageType<LossLessItem> {
    constructor() {
        super("bilibili.app.playerunite.v1.LossLessItem", [
            { no: 1, name: "is_lossless_audio", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "audio", kind: "message", T: () => DashItem },
            { no: 3, name: "need_vip", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<LossLessItem>): LossLessItem {
        const message = { isLosslessAudio: false, needVip: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LossLessItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LossLessItem): LossLessItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_lossless_audio */ 1:
                    message.isLosslessAudio = reader.bool();
                    break;
                case /* bilibili.app.playerunite.v1.DashItem audio */ 2:
                    message.audio = DashItem.internalBinaryRead(reader, reader.uint32(), options, message.audio);
                    break;
                case /* bool need_vip */ 3:
                    message.needVip = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LossLessItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_lossless_audio = 1; */
        if (message.isLosslessAudio !== false)
            writer.tag(1, WireType.Varint).bool(message.isLosslessAudio);
        /* bilibili.app.playerunite.v1.DashItem audio = 2; */
        if (message.audio)
            DashItem.internalBinaryWrite(message.audio, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bool need_vip = 3; */
        if (message.needVip !== false)
            writer.tag(3, WireType.Varint).bool(message.needVip);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.LossLessItem
 */
export const LossLessItem = new LossLessItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Node$Type extends MessageType<Node> {
    constructor() {
        super("bilibili.app.playerunite.v1.Node", [
            { no: 1, name: "node_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "cid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<Node>): Node {
        const message = { nodeId: 0, title: "", cid: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Node>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Node): Node {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 node_id */ 1:
                    message.nodeId = reader.int64().toNumber();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* int64 cid */ 3:
                    message.cid = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Node, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 node_id = 1; */
        if (message.nodeId !== 0)
            writer.tag(1, WireType.Varint).int64(message.nodeId);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* int64 cid = 3; */
        if (message.cid !== 0)
            writer.tag(3, WireType.Varint).int64(message.cid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.Node
 */
export const Node = new Node$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayArc$Type extends MessageType<PlayArc> {
    constructor() {
        super("bilibili.app.playerunite.v1.PlayArc", [
            { no: 1, name: "video_type", kind: "enum", T: () => ["bilibili.app.playerunite.v1.BizType", BizType, "BIZ_TYPE_"] },
            { no: 2, name: "aid", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "cid", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "drm_tech_type", kind: "enum", T: () => ["bilibili.app.playerunite.v1.DrmTechType", DrmTechType] },
            { no: 5, name: "arc_type", kind: "enum", T: () => ["bilibili.app.playerunite.v1.ArcType", ArcType, "ARC_TYPE_"] },
            { no: 6, name: "interaction", kind: "message", T: () => Interaction },
            { no: 7, name: "dimension", kind: "message", T: () => Dimension },
            { no: 8, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 9, name: "is_preview", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PlayArc>): PlayArc {
        const message = { videoType: 0, aid: 0, cid: 0, drmTechType: 0, arcType: 0, duration: 0, isPreview: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayArc>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayArc): PlayArc {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.playerunite.v1.BizType video_type */ 1:
                    message.videoType = reader.int32();
                    break;
                case /* uint64 aid */ 2:
                    message.aid = reader.uint64().toNumber();
                    break;
                case /* uint64 cid */ 3:
                    message.cid = reader.uint64().toNumber();
                    break;
                case /* bilibili.app.playerunite.v1.DrmTechType drm_tech_type */ 4:
                    message.drmTechType = reader.int32();
                    break;
                case /* bilibili.app.playerunite.v1.ArcType arc_type */ 5:
                    message.arcType = reader.int32();
                    break;
                case /* bilibili.app.playerunite.v1.Interaction interaction */ 6:
                    message.interaction = Interaction.internalBinaryRead(reader, reader.uint32(), options, message.interaction);
                    break;
                case /* bilibili.app.playerunite.v1.Dimension dimension */ 7:
                    message.dimension = Dimension.internalBinaryRead(reader, reader.uint32(), options, message.dimension);
                    break;
                case /* int64 duration */ 8:
                    message.duration = reader.int64().toNumber();
                    break;
                case /* bool is_preview */ 9:
                    message.isPreview = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayArc, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bilibili.app.playerunite.v1.BizType video_type = 1; */
        if (message.videoType !== 0)
            writer.tag(1, WireType.Varint).int32(message.videoType);
        /* uint64 aid = 2; */
        if (message.aid !== 0)
            writer.tag(2, WireType.Varint).uint64(message.aid);
        /* uint64 cid = 3; */
        if (message.cid !== 0)
            writer.tag(3, WireType.Varint).uint64(message.cid);
        /* bilibili.app.playerunite.v1.DrmTechType drm_tech_type = 4; */
        if (message.drmTechType !== 0)
            writer.tag(4, WireType.Varint).int32(message.drmTechType);
        /* bilibili.app.playerunite.v1.ArcType arc_type = 5; */
        if (message.arcType !== 0)
            writer.tag(5, WireType.Varint).int32(message.arcType);
        /* bilibili.app.playerunite.v1.Interaction interaction = 6; */
        if (message.interaction)
            Interaction.internalBinaryWrite(message.interaction, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playerunite.v1.Dimension dimension = 7; */
        if (message.dimension)
            Dimension.internalBinaryWrite(message.dimension, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* int64 duration = 8; */
        if (message.duration !== 0)
            writer.tag(8, WireType.Varint).int64(message.duration);
        /* bool is_preview = 9; */
        if (message.isPreview !== false)
            writer.tag(9, WireType.Varint).bool(message.isPreview);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.PlayArc
 */
export const PlayArc = new PlayArc$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayArcConf$Type extends MessageType<PlayArcConf> {
    constructor() {
        super("bilibili.app.playerunite.v1.PlayArcConf", [
            { no: 1, name: "arc_confs", kind: "map", K: 5 /*ScalarType.INT32*/, V: { kind: "message", T: () => ArcConf } }
        ]);
    }
    create(value?: PartialMessage<PlayArcConf>): PlayArcConf {
        const message = { arcConfs: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayArcConf>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayArcConf): PlayArcConf {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<int32, bilibili.app.playerunite.v1.ArcConf> arc_confs */ 1:
                    this.binaryReadMap1(message.arcConfs, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: PlayArcConf["arcConfs"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof PlayArcConf["arcConfs"] | undefined, val: PlayArcConf["arcConfs"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.int32();
                    break;
                case 2:
                    val = ArcConf.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.app.playerunite.v1.PlayArcConf.arc_confs");
            }
        }
        map[key ?? 0] = val ?? ArcConf.create();
    }
    internalBinaryWrite(message: PlayArcConf, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<int32, bilibili.app.playerunite.v1.ArcConf> arc_confs = 1; */
        for (let k of Object.keys(message.arcConfs)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.Varint).int32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            ArcConf.internalBinaryWrite(message.arcConfs[k as any], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.PlayArcConf
 */
export const PlayArcConf = new PlayArcConf$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayDeviceConf$Type extends MessageType<PlayDeviceConf> {
    constructor() {
        super("bilibili.app.playerunite.v1.PlayDeviceConf", [
            { no: 1, name: "device_confs", kind: "map", K: 5 /*ScalarType.INT32*/, V: { kind: "message", T: () => DeviceConf } }
        ]);
    }
    create(value?: PartialMessage<PlayDeviceConf>): PlayDeviceConf {
        const message = { deviceConfs: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayDeviceConf>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayDeviceConf): PlayDeviceConf {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<int32, bilibili.app.playerunite.v1.DeviceConf> device_confs */ 1:
                    this.binaryReadMap1(message.deviceConfs, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: PlayDeviceConf["deviceConfs"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof PlayDeviceConf["deviceConfs"] | undefined, val: PlayDeviceConf["deviceConfs"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.int32();
                    break;
                case 2:
                    val = DeviceConf.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.app.playerunite.v1.PlayDeviceConf.device_confs");
            }
        }
        map[key ?? 0] = val ?? DeviceConf.create();
    }
    internalBinaryWrite(message: PlayDeviceConf, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<int32, bilibili.app.playerunite.v1.DeviceConf> device_confs = 1; */
        for (let k of Object.keys(message.deviceConfs)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.Varint).int32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            DeviceConf.internalBinaryWrite(message.deviceConfs[k as any], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.PlayDeviceConf
 */
export const PlayDeviceConf = new PlayDeviceConf$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayList$Type extends MessageType<PlayList> {
    constructor() {
        super("bilibili.app.playerunite.v1.PlayList", [
            { no: 1, name: "season_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "cover", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "link", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "badge_info", kind: "message", T: () => BadgeInfo }
        ]);
    }
    create(value?: PartialMessage<PlayList>): PlayList {
        const message = { seasonId: 0, title: "", cover: "", link: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayList): PlayList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 season_id */ 1:
                    message.seasonId = reader.int64().toNumber();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string cover */ 3:
                    message.cover = reader.string();
                    break;
                case /* string link */ 4:
                    message.link = reader.string();
                    break;
                case /* bilibili.app.playerunite.v1.BadgeInfo badge_info */ 5:
                    message.badgeInfo = BadgeInfo.internalBinaryRead(reader, reader.uint32(), options, message.badgeInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 season_id = 1; */
        if (message.seasonId !== 0)
            writer.tag(1, WireType.Varint).int64(message.seasonId);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string cover = 3; */
        if (message.cover !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.cover);
        /* string link = 4; */
        if (message.link !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.link);
        /* bilibili.app.playerunite.v1.BadgeInfo badge_info = 5; */
        if (message.badgeInfo)
            BadgeInfo.internalBinaryWrite(message.badgeInfo, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.PlayList
 */
export const PlayList = new PlayList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayListInfo$Type extends MessageType<PlayListInfo> {
    constructor() {
        super("bilibili.app.playerunite.v1.PlayListInfo", [
            { no: 2, name: "play_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PlayList }
        ]);
    }
    create(value?: PartialMessage<PlayListInfo>): PlayListInfo {
        const message = { playList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayListInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayListInfo): PlayListInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bilibili.app.playerunite.v1.PlayList play_list */ 2:
                    message.playList.push(PlayList.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayListInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated bilibili.app.playerunite.v1.PlayList play_list = 2; */
        for (let i = 0; i < message.playList.length; i++)
            PlayList.internalBinaryWrite(message.playList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.PlayListInfo
 */
export const PlayListInfo = new PlayListInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PromptBar$Type extends MessageType<PromptBar> {
    constructor() {
        super("bilibili.app.playerunite.v1.PromptBar", [
            { no: 1, name: "title", kind: "message", T: () => TextInfo },
            { no: 2, name: "subtitle", kind: "message", T: () => TextInfo },
            { no: 3, name: "sub_title_icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "bg_image", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "bg_gradient_color", kind: "message", T: () => GradientColor },
            { no: 6, name: "button", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ButtonInfo },
            { no: 7, name: "report", kind: "message", T: () => Report },
            { no: 8, name: "full_screen_ip_icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "full_screen_bg_gradient_color", kind: "message", T: () => GradientColor }
        ]);
    }
    create(value?: PartialMessage<PromptBar>): PromptBar {
        const message = { subTitleIcon: "", bgImage: "", button: [], fullScreenIpIcon: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PromptBar>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PromptBar): PromptBar {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.playerunite.v1.TextInfo title */ 1:
                    message.title = TextInfo.internalBinaryRead(reader, reader.uint32(), options, message.title);
                    break;
                case /* bilibili.app.playerunite.v1.TextInfo subtitle */ 2:
                    message.subtitle = TextInfo.internalBinaryRead(reader, reader.uint32(), options, message.subtitle);
                    break;
                case /* string sub_title_icon */ 3:
                    message.subTitleIcon = reader.string();
                    break;
                case /* string bg_image */ 4:
                    message.bgImage = reader.string();
                    break;
                case /* bilibili.app.playerunite.v1.GradientColor bg_gradient_color */ 5:
                    message.bgGradientColor = GradientColor.internalBinaryRead(reader, reader.uint32(), options, message.bgGradientColor);
                    break;
                case /* repeated bilibili.app.playerunite.v1.ButtonInfo button */ 6:
                    message.button.push(ButtonInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.app.playerunite.v1.Report report */ 7:
                    message.report = Report.internalBinaryRead(reader, reader.uint32(), options, message.report);
                    break;
                case /* string full_screen_ip_icon */ 8:
                    message.fullScreenIpIcon = reader.string();
                    break;
                case /* bilibili.app.playerunite.v1.GradientColor full_screen_bg_gradient_color */ 9:
                    message.fullScreenBgGradientColor = GradientColor.internalBinaryRead(reader, reader.uint32(), options, message.fullScreenBgGradientColor);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PromptBar, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bilibili.app.playerunite.v1.TextInfo title = 1; */
        if (message.title)
            TextInfo.internalBinaryWrite(message.title, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playerunite.v1.TextInfo subtitle = 2; */
        if (message.subtitle)
            TextInfo.internalBinaryWrite(message.subtitle, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string sub_title_icon = 3; */
        if (message.subTitleIcon !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.subTitleIcon);
        /* string bg_image = 4; */
        if (message.bgImage !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.bgImage);
        /* bilibili.app.playerunite.v1.GradientColor bg_gradient_color = 5; */
        if (message.bgGradientColor)
            GradientColor.internalBinaryWrite(message.bgGradientColor, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.app.playerunite.v1.ButtonInfo button = 6; */
        for (let i = 0; i < message.button.length; i++)
            ButtonInfo.internalBinaryWrite(message.button[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playerunite.v1.Report report = 7; */
        if (message.report)
            Report.internalBinaryWrite(message.report, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* string full_screen_ip_icon = 8; */
        if (message.fullScreenIpIcon !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.fullScreenIpIcon);
        /* bilibili.app.playerunite.v1.GradientColor full_screen_bg_gradient_color = 9; */
        if (message.fullScreenBgGradientColor)
            GradientColor.internalBinaryWrite(message.fullScreenBgGradientColor, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.PromptBar
 */
export const PromptBar = new PromptBar$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QnTrialInfo$Type extends MessageType<QnTrialInfo> {
    constructor() {
        super("bilibili.app.playerunite.v1.QnTrialInfo", [
            { no: 1, name: "trial_able", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "remaining_times", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "start", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "time_length", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "start_toast", kind: "message", T: () => Toast },
            { no: 6, name: "end_toast", kind: "message", T: () => Toast },
            { no: 8, name: "quality_open_tip_btn", kind: "message", T: () => Button }
        ]);
    }
    create(value?: PartialMessage<QnTrialInfo>): QnTrialInfo {
        const message = { trialAble: false, remainingTimes: 0, start: 0, timeLength: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QnTrialInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QnTrialInfo): QnTrialInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool trial_able */ 1:
                    message.trialAble = reader.bool();
                    break;
                case /* int32 remaining_times */ 2:
                    message.remainingTimes = reader.int32();
                    break;
                case /* int32 start */ 3:
                    message.start = reader.int32();
                    break;
                case /* int32 time_length */ 4:
                    message.timeLength = reader.int32();
                    break;
                case /* bilibili.app.playerunite.v1.Toast start_toast */ 5:
                    message.startToast = Toast.internalBinaryRead(reader, reader.uint32(), options, message.startToast);
                    break;
                case /* bilibili.app.playerunite.v1.Toast end_toast */ 6:
                    message.endToast = Toast.internalBinaryRead(reader, reader.uint32(), options, message.endToast);
                    break;
                case /* bilibili.app.playerunite.v1.Button quality_open_tip_btn */ 8:
                    message.qualityOpenTipBtn = Button.internalBinaryRead(reader, reader.uint32(), options, message.qualityOpenTipBtn);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QnTrialInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool trial_able = 1; */
        if (message.trialAble !== false)
            writer.tag(1, WireType.Varint).bool(message.trialAble);
        /* int32 remaining_times = 2; */
        if (message.remainingTimes !== 0)
            writer.tag(2, WireType.Varint).int32(message.remainingTimes);
        /* int32 start = 3; */
        if (message.start !== 0)
            writer.tag(3, WireType.Varint).int32(message.start);
        /* int32 time_length = 4; */
        if (message.timeLength !== 0)
            writer.tag(4, WireType.Varint).int32(message.timeLength);
        /* bilibili.app.playerunite.v1.Toast start_toast = 5; */
        if (message.startToast)
            Toast.internalBinaryWrite(message.startToast, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playerunite.v1.Toast end_toast = 6; */
        if (message.endToast)
            Toast.internalBinaryWrite(message.endToast, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playerunite.v1.Button quality_open_tip_btn = 8; */
        if (message.qualityOpenTipBtn)
            Button.internalBinaryWrite(message.qualityOpenTipBtn, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.QnTrialInfo
 */
export const QnTrialInfo = new QnTrialInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Report$Type extends MessageType<Report> {
    constructor() {
        super("bilibili.app.playerunite.v1.Report", [
            { no: 1, name: "show_event_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "click_event_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "extends", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Report>): Report {
        const message = { showEventId: "", clickEventId: "", extends: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Report>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Report): Report {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string show_event_id */ 1:
                    message.showEventId = reader.string();
                    break;
                case /* string click_event_id */ 2:
                    message.clickEventId = reader.string();
                    break;
                case /* string extends */ 3:
                    message.extends = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Report, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string show_event_id = 1; */
        if (message.showEventId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.showEventId);
        /* string click_event_id = 2; */
        if (message.clickEventId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.clickEventId);
        /* string extends = 3; */
        if (message.extends !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.extends);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.Report
 */
export const Report = new Report$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResponseDash$Type extends MessageType<ResponseDash> {
    constructor() {
        super("bilibili.app.playerunite.v1.ResponseDash", [
            { no: 1, name: "video", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DashItem },
            { no: 2, name: "audio", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DashItem }
        ]);
    }
    create(value?: PartialMessage<ResponseDash>): ResponseDash {
        const message = { video: [], audio: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ResponseDash>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseDash): ResponseDash {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bilibili.app.playerunite.v1.DashItem video */ 1:
                    message.video.push(DashItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated bilibili.app.playerunite.v1.DashItem audio */ 2:
                    message.audio.push(DashItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResponseDash, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated bilibili.app.playerunite.v1.DashItem video = 1; */
        for (let i = 0; i < message.video.length; i++)
            DashItem.internalBinaryWrite(message.video[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.app.playerunite.v1.DashItem audio = 2; */
        for (let i = 0; i < message.audio.length; i++)
            DashItem.internalBinaryWrite(message.audio[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.ResponseDash
 */
export const ResponseDash = new ResponseDash$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResponseUrl$Type extends MessageType<ResponseUrl> {
    constructor() {
        super("bilibili.app.playerunite.v1.ResponseUrl", [
            { no: 1, name: "order", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "length", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "size", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "backup_url", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "md5", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ResponseUrl>): ResponseUrl {
        const message = { order: 0, length: 0, size: 0, url: "", backupUrl: [], md5: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ResponseUrl>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseUrl): ResponseUrl {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 order */ 1:
                    message.order = reader.uint32();
                    break;
                case /* uint64 length */ 2:
                    message.length = reader.uint64().toNumber();
                    break;
                case /* uint64 size */ 3:
                    message.size = reader.uint64().toNumber();
                    break;
                case /* string url */ 4:
                    message.url = reader.string();
                    break;
                case /* repeated string backup_url */ 5:
                    message.backupUrl.push(reader.string());
                    break;
                case /* string md5 */ 6:
                    message.md5 = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResponseUrl, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 order = 1; */
        if (message.order !== 0)
            writer.tag(1, WireType.Varint).uint32(message.order);
        /* uint64 length = 2; */
        if (message.length !== 0)
            writer.tag(2, WireType.Varint).uint64(message.length);
        /* uint64 size = 3; */
        if (message.size !== 0)
            writer.tag(3, WireType.Varint).uint64(message.size);
        /* string url = 4; */
        if (message.url !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.url);
        /* repeated string backup_url = 5; */
        for (let i = 0; i < message.backupUrl.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.backupUrl[i]);
        /* string md5 = 6; */
        if (message.md5 !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.md5);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.ResponseUrl
 */
export const ResponseUrl = new ResponseUrl$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Scheme$Type extends MessageType<Scheme> {
    constructor() {
        super("bilibili.app.playerunite.v1.Scheme", [
            { no: 1, name: "action_type", kind: "enum", T: () => ["bilibili.app.playerunite.v1.Scheme.ActionType", Scheme_ActionType] },
            { no: 2, name: "toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Scheme>): Scheme {
        const message = { actionType: 0, toast: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Scheme>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Scheme): Scheme {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.playerunite.v1.Scheme.ActionType action_type */ 1:
                    message.actionType = reader.int32();
                    break;
                case /* string toast */ 2:
                    message.toast = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Scheme, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bilibili.app.playerunite.v1.Scheme.ActionType action_type = 1; */
        if (message.actionType !== 0)
            writer.tag(1, WireType.Varint).int32(message.actionType);
        /* string toast = 2; */
        if (message.toast !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.toast);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.Scheme
 */
export const Scheme = new Scheme$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SegmentVideo$Type extends MessageType<SegmentVideo> {
    constructor() {
        super("bilibili.app.playerunite.v1.SegmentVideo", [
            { no: 1, name: "segment", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ResponseUrl }
        ]);
    }
    create(value?: PartialMessage<SegmentVideo>): SegmentVideo {
        const message = { segment: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SegmentVideo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SegmentVideo): SegmentVideo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bilibili.app.playerunite.v1.ResponseUrl segment */ 1:
                    message.segment.push(ResponseUrl.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SegmentVideo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated bilibili.app.playerunite.v1.ResponseUrl segment = 1; */
        for (let i = 0; i < message.segment.length; i++)
            ResponseUrl.internalBinaryWrite(message.segment[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.SegmentVideo
 */
export const SegmentVideo = new SegmentVideo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Shake$Type extends MessageType<Shake> {
    constructor() {
        super("bilibili.app.playerunite.v1.Shake", [
            { no: 1, name: "file", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Shake>): Shake {
        const message = { file: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Shake>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Shake): Shake {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string file */ 1:
                    message.file = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Shake, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string file = 1; */
        if (message.file !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.file);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.Shake
 */
export const Shake = new Shake$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Stream$Type extends MessageType<Stream> {
    constructor() {
        super("bilibili.app.playerunite.v1.Stream", [
            { no: 1, name: "stream_info", kind: "message", T: () => StreamInfo },
            { no: 2, name: "dash_video", kind: "message", oneof: "content", T: () => DashVideo },
            { no: 3, name: "segment_video", kind: "message", oneof: "content", T: () => SegmentVideo }
        ]);
    }
    create(value?: PartialMessage<Stream>): Stream {
        const message = { content: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Stream>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Stream): Stream {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.playerunite.v1.StreamInfo stream_info */ 1:
                    message.streamInfo = StreamInfo.internalBinaryRead(reader, reader.uint32(), options, message.streamInfo);
                    break;
                case /* bilibili.app.playerunite.v1.DashVideo dash_video */ 2:
                    message.content = {
                        oneofKind: "dashVideo",
                        dashVideo: DashVideo.internalBinaryRead(reader, reader.uint32(), options, (message.content as any).dashVideo)
                    };
                    break;
                case /* bilibili.app.playerunite.v1.SegmentVideo segment_video */ 3:
                    message.content = {
                        oneofKind: "segmentVideo",
                        segmentVideo: SegmentVideo.internalBinaryRead(reader, reader.uint32(), options, (message.content as any).segmentVideo)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Stream, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bilibili.app.playerunite.v1.StreamInfo stream_info = 1; */
        if (message.streamInfo)
            StreamInfo.internalBinaryWrite(message.streamInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playerunite.v1.DashVideo dash_video = 2; */
        if (message.content.oneofKind === "dashVideo")
            DashVideo.internalBinaryWrite(message.content.dashVideo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playerunite.v1.SegmentVideo segment_video = 3; */
        if (message.content.oneofKind === "segmentVideo")
            SegmentVideo.internalBinaryWrite(message.content.segmentVideo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.Stream
 */
export const Stream = new Stream$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamInfo$Type extends MessageType<StreamInfo> {
    constructor() {
        super("bilibili.app.playerunite.v1.StreamInfo", [
            { no: 1, name: "quality", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "format", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "err_code", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "limit", kind: "message", T: () => StreamLimit },
            { no: 6, name: "need_vip", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "need_login", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "intact", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "no_rexcode", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "attribute", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 11, name: "new_description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "display_desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "superscript", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "vip_free", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "subtitle", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "scheme", kind: "message", T: () => Scheme },
            { no: 17, name: "support_drm", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<StreamInfo>): StreamInfo {
        const message = { quality: 0, format: "", description: "", errCode: 0, needVip: false, needLogin: false, intact: false, noRexcode: false, attribute: 0, newDescription: "", displayDesc: "", superscript: "", vipFree: false, subtitle: "", supportDrm: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StreamInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamInfo): StreamInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 quality */ 1:
                    message.quality = reader.uint32();
                    break;
                case /* string format */ 2:
                    message.format = reader.string();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                case /* uint32 err_code */ 4:
                    message.errCode = reader.uint32();
                    break;
                case /* bilibili.app.playerunite.v1.StreamLimit limit */ 5:
                    message.limit = StreamLimit.internalBinaryRead(reader, reader.uint32(), options, message.limit);
                    break;
                case /* bool need_vip */ 6:
                    message.needVip = reader.bool();
                    break;
                case /* bool need_login */ 7:
                    message.needLogin = reader.bool();
                    break;
                case /* bool intact */ 8:
                    message.intact = reader.bool();
                    break;
                case /* bool no_rexcode */ 9:
                    message.noRexcode = reader.bool();
                    break;
                case /* int64 attribute */ 10:
                    message.attribute = reader.int64().toNumber();
                    break;
                case /* string new_description */ 11:
                    message.newDescription = reader.string();
                    break;
                case /* string display_desc */ 12:
                    message.displayDesc = reader.string();
                    break;
                case /* string superscript */ 13:
                    message.superscript = reader.string();
                    break;
                case /* bool vip_free */ 14:
                    message.vipFree = reader.bool();
                    break;
                case /* string subtitle */ 15:
                    message.subtitle = reader.string();
                    break;
                case /* bilibili.app.playerunite.v1.Scheme scheme */ 16:
                    message.scheme = Scheme.internalBinaryRead(reader, reader.uint32(), options, message.scheme);
                    break;
                case /* bool support_drm */ 17:
                    message.supportDrm = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 quality = 1; */
        if (message.quality !== 0)
            writer.tag(1, WireType.Varint).uint32(message.quality);
        /* string format = 2; */
        if (message.format !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.format);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* uint32 err_code = 4; */
        if (message.errCode !== 0)
            writer.tag(4, WireType.Varint).uint32(message.errCode);
        /* bilibili.app.playerunite.v1.StreamLimit limit = 5; */
        if (message.limit)
            StreamLimit.internalBinaryWrite(message.limit, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bool need_vip = 6; */
        if (message.needVip !== false)
            writer.tag(6, WireType.Varint).bool(message.needVip);
        /* bool need_login = 7; */
        if (message.needLogin !== false)
            writer.tag(7, WireType.Varint).bool(message.needLogin);
        /* bool intact = 8; */
        if (message.intact !== false)
            writer.tag(8, WireType.Varint).bool(message.intact);
        /* bool no_rexcode = 9; */
        if (message.noRexcode !== false)
            writer.tag(9, WireType.Varint).bool(message.noRexcode);
        /* int64 attribute = 10; */
        if (message.attribute !== 0)
            writer.tag(10, WireType.Varint).int64(message.attribute);
        /* string new_description = 11; */
        if (message.newDescription !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.newDescription);
        /* string display_desc = 12; */
        if (message.displayDesc !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.displayDesc);
        /* string superscript = 13; */
        if (message.superscript !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.superscript);
        /* bool vip_free = 14; */
        if (message.vipFree !== false)
            writer.tag(14, WireType.Varint).bool(message.vipFree);
        /* string subtitle = 15; */
        if (message.subtitle !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.subtitle);
        /* bilibili.app.playerunite.v1.Scheme scheme = 16; */
        if (message.scheme)
            Scheme.internalBinaryWrite(message.scheme, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* bool support_drm = 17; */
        if (message.supportDrm !== false)
            writer.tag(17, WireType.Varint).bool(message.supportDrm);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.StreamInfo
 */
export const StreamInfo = new StreamInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamLimit$Type extends MessageType<StreamLimit> {
    constructor() {
        super("bilibili.app.playerunite.v1.StreamLimit", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "msg", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StreamLimit>): StreamLimit {
        const message = { title: "", uri: "", msg: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StreamLimit>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamLimit): StreamLimit {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string uri */ 2:
                    message.uri = reader.string();
                    break;
                case /* string msg */ 3:
                    message.msg = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamLimit, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string uri = 2; */
        if (message.uri !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.uri);
        /* string msg = 3; */
        if (message.msg !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.msg);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.StreamLimit
 */
export const StreamLimit = new StreamLimit$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TaskParam$Type extends MessageType<TaskParam> {
    constructor() {
        super("bilibili.app.playerunite.v1.TaskParam", [
            { no: 1, name: "task_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "activity_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "tips_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<TaskParam>): TaskParam {
        const message = { taskType: "", activityId: 0, tipsId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TaskParam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TaskParam): TaskParam {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string task_type */ 1:
                    message.taskType = reader.string();
                    break;
                case /* int64 activity_id */ 2:
                    message.activityId = reader.int64().toNumber();
                    break;
                case /* int64 tips_id */ 3:
                    message.tipsId = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TaskParam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string task_type = 1; */
        if (message.taskType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.taskType);
        /* int64 activity_id = 2; */
        if (message.activityId !== 0)
            writer.tag(2, WireType.Varint).int64(message.activityId);
        /* int64 tips_id = 3; */
        if (message.tipsId !== 0)
            writer.tag(3, WireType.Varint).int64(message.tipsId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.TaskParam
 */
export const TaskParam = new TaskParam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TextInfo$Type extends MessageType<TextInfo> {
    constructor() {
        super("bilibili.app.playerunite.v1.TextInfo", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "text_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "text_color_night", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TextInfo>): TextInfo {
        const message = { text: "", textColor: "", textColorNight: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TextInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TextInfo): TextInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* string text_color */ 2:
                    message.textColor = reader.string();
                    break;
                case /* string text_color_night */ 3:
                    message.textColorNight = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TextInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* string text_color = 2; */
        if (message.textColor !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.textColor);
        /* string text_color_night = 3; */
        if (message.textColorNight !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.textColorNight);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.TextInfo
 */
export const TextInfo = new TextInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Toast$Type extends MessageType<Toast> {
    constructor() {
        super("bilibili.app.playerunite.v1.Toast", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "button", kind: "message", T: () => Button }
        ]);
    }
    create(value?: PartialMessage<Toast>): Toast {
        const message = { text: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Toast>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Toast): Toast {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* bilibili.app.playerunite.v1.Button button */ 2:
                    message.button = Button.internalBinaryRead(reader, reader.uint32(), options, message.button);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Toast, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* bilibili.app.playerunite.v1.Button button = 2; */
        if (message.button)
            Button.internalBinaryWrite(message.button, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.Toast
 */
export const Toast = new Toast$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VideoVod$Type extends MessageType<VideoVod> {
    constructor() {
        super("bilibili.app.playerunite.v1.VideoVod", [
            { no: 1, name: "aid", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "cid", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "qn", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "fnver", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "fnval", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "download", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "force_host", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "fourk", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "prefer_codec_type", kind: "enum", T: () => ["bilibili.app.playerunite.v1.CodeType", CodeType] },
            { no: 10, name: "voice_balance", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<VideoVod>): VideoVod {
        const message = { aid: 0, cid: 0, qn: 0, fnver: 0, fnval: 0, download: 0, forceHost: 0, fourk: false, preferCodecType: 0, voiceBalance: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VideoVod>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VideoVod): VideoVod {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 aid */ 1:
                    message.aid = reader.int32();
                    break;
                case /* int32 cid */ 2:
                    message.cid = reader.int32();
                    break;
                case /* uint64 qn */ 3:
                    message.qn = reader.uint64().toNumber();
                    break;
                case /* int32 fnver */ 4:
                    message.fnver = reader.int32();
                    break;
                case /* int32 fnval */ 5:
                    message.fnval = reader.int32();
                    break;
                case /* uint32 download */ 6:
                    message.download = reader.uint32();
                    break;
                case /* int32 force_host */ 7:
                    message.forceHost = reader.int32();
                    break;
                case /* bool fourk */ 8:
                    message.fourk = reader.bool();
                    break;
                case /* bilibili.app.playerunite.v1.CodeType prefer_codec_type */ 9:
                    message.preferCodecType = reader.int32();
                    break;
                case /* uint64 voice_balance */ 10:
                    message.voiceBalance = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VideoVod, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 aid = 1; */
        if (message.aid !== 0)
            writer.tag(1, WireType.Varint).int32(message.aid);
        /* int32 cid = 2; */
        if (message.cid !== 0)
            writer.tag(2, WireType.Varint).int32(message.cid);
        /* uint64 qn = 3; */
        if (message.qn !== 0)
            writer.tag(3, WireType.Varint).uint64(message.qn);
        /* int32 fnver = 4; */
        if (message.fnver !== 0)
            writer.tag(4, WireType.Varint).int32(message.fnver);
        /* int32 fnval = 5; */
        if (message.fnval !== 0)
            writer.tag(5, WireType.Varint).int32(message.fnval);
        /* uint32 download = 6; */
        if (message.download !== 0)
            writer.tag(6, WireType.Varint).uint32(message.download);
        /* int32 force_host = 7; */
        if (message.forceHost !== 0)
            writer.tag(7, WireType.Varint).int32(message.forceHost);
        /* bool fourk = 8; */
        if (message.fourk !== false)
            writer.tag(8, WireType.Varint).bool(message.fourk);
        /* bilibili.app.playerunite.v1.CodeType prefer_codec_type = 9; */
        if (message.preferCodecType !== 0)
            writer.tag(9, WireType.Varint).int32(message.preferCodecType);
        /* uint64 voice_balance = 10; */
        if (message.voiceBalance !== 0)
            writer.tag(10, WireType.Varint).uint64(message.voiceBalance);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.VideoVod
 */
export const VideoVod = new VideoVod$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ViewInfo$Type extends MessageType<ViewInfo> {
    constructor() {
        super("bilibili.app.playerunite.v1.ViewInfo", [
            { no: 1, name: "dialog_map", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Dialog } },
            { no: 2, name: "prompt_bar", kind: "message", T: () => PromptBar },
            { no: 3, name: "toasts", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ComprehensiveToast }
        ]);
    }
    create(value?: PartialMessage<ViewInfo>): ViewInfo {
        const message = { dialogMap: {}, toasts: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ViewInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ViewInfo): ViewInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, bilibili.app.playerunite.v1.Dialog> dialog_map */ 1:
                    this.binaryReadMap1(message.dialogMap, reader, options);
                    break;
                case /* bilibili.app.playerunite.v1.PromptBar prompt_bar */ 2:
                    message.promptBar = PromptBar.internalBinaryRead(reader, reader.uint32(), options, message.promptBar);
                    break;
                case /* repeated bilibili.app.playerunite.v1.ComprehensiveToast toasts */ 3:
                    message.toasts.push(ComprehensiveToast.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: ViewInfo["dialogMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ViewInfo["dialogMap"] | undefined, val: ViewInfo["dialogMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Dialog.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.app.playerunite.v1.ViewInfo.dialog_map");
            }
        }
        map[key ?? ""] = val ?? Dialog.create();
    }
    internalBinaryWrite(message: ViewInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, bilibili.app.playerunite.v1.Dialog> dialog_map = 1; */
        for (let k of Object.keys(message.dialogMap)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Dialog.internalBinaryWrite(message.dialogMap[k], writer, options);
            writer.join().join();
        }
        /* bilibili.app.playerunite.v1.PromptBar prompt_bar = 2; */
        if (message.promptBar)
            PromptBar.internalBinaryWrite(message.promptBar, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.app.playerunite.v1.ComprehensiveToast toasts = 3; */
        for (let i = 0; i < message.toasts.length; i++)
            ComprehensiveToast.internalBinaryWrite(message.toasts[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.ViewInfo
 */
export const ViewInfo = new ViewInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VodInfo$Type extends MessageType<VodInfo> {
    constructor() {
        super("bilibili.app.playerunite.v1.VodInfo", [
            { no: 1, name: "quality", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "format", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "timelength", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "video_codecid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "stream_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Stream },
            { no: 6, name: "dash_audio", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DashItem },
            { no: 7, name: "dolby", kind: "message", T: () => DolbyItem },
            { no: 8, name: "volume", kind: "message", T: () => VolumeInfo },
            { no: 9, name: "loss_less_item", kind: "message", T: () => LossLessItem },
            { no: 10, name: "support_project", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<VodInfo>): VodInfo {
        const message = { quality: 0, format: "", timelength: 0, videoCodecid: 0, streamList: [], dashAudio: [], supportProject: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VodInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VodInfo): VodInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 quality */ 1:
                    message.quality = reader.uint32();
                    break;
                case /* string format */ 2:
                    message.format = reader.string();
                    break;
                case /* uint64 timelength */ 3:
                    message.timelength = reader.uint64().toNumber();
                    break;
                case /* uint32 video_codecid */ 4:
                    message.videoCodecid = reader.uint32();
                    break;
                case /* repeated bilibili.app.playerunite.v1.Stream stream_list */ 5:
                    message.streamList.push(Stream.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated bilibili.app.playerunite.v1.DashItem dash_audio */ 6:
                    message.dashAudio.push(DashItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.app.playerunite.v1.DolbyItem dolby */ 7:
                    message.dolby = DolbyItem.internalBinaryRead(reader, reader.uint32(), options, message.dolby);
                    break;
                case /* bilibili.app.playerunite.v1.VolumeInfo volume */ 8:
                    message.volume = VolumeInfo.internalBinaryRead(reader, reader.uint32(), options, message.volume);
                    break;
                case /* bilibili.app.playerunite.v1.LossLessItem loss_less_item */ 9:
                    message.lossLessItem = LossLessItem.internalBinaryRead(reader, reader.uint32(), options, message.lossLessItem);
                    break;
                case /* bool support_project */ 10:
                    message.supportProject = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VodInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 quality = 1; */
        if (message.quality !== 0)
            writer.tag(1, WireType.Varint).uint32(message.quality);
        /* string format = 2; */
        if (message.format !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.format);
        /* uint64 timelength = 3; */
        if (message.timelength !== 0)
            writer.tag(3, WireType.Varint).uint64(message.timelength);
        /* uint32 video_codecid = 4; */
        if (message.videoCodecid !== 0)
            writer.tag(4, WireType.Varint).uint32(message.videoCodecid);
        /* repeated bilibili.app.playerunite.v1.Stream stream_list = 5; */
        for (let i = 0; i < message.streamList.length; i++)
            Stream.internalBinaryWrite(message.streamList[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.app.playerunite.v1.DashItem dash_audio = 6; */
        for (let i = 0; i < message.dashAudio.length; i++)
            DashItem.internalBinaryWrite(message.dashAudio[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playerunite.v1.DolbyItem dolby = 7; */
        if (message.dolby)
            DolbyItem.internalBinaryWrite(message.dolby, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playerunite.v1.VolumeInfo volume = 8; */
        if (message.volume)
            VolumeInfo.internalBinaryWrite(message.volume, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playerunite.v1.LossLessItem loss_less_item = 9; */
        if (message.lossLessItem)
            LossLessItem.internalBinaryWrite(message.lossLessItem, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* bool support_project = 10; */
        if (message.supportProject !== false)
            writer.tag(10, WireType.Varint).bool(message.supportProject);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.VodInfo
 */
export const VodInfo = new VodInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VolumeInfo$Type extends MessageType<VolumeInfo> {
    constructor() {
        super("bilibili.app.playerunite.v1.VolumeInfo", [
            { no: 1, name: "measured_i", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "measured_lra", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "measured_tp", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "measured_threshold", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "target_offset", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "target_i", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "target_tp", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<VolumeInfo>): VolumeInfo {
        const message = { measuredI: 0, measuredLra: 0, measuredTp: 0, measuredThreshold: 0, targetOffset: 0, targetI: 0, targetTp: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VolumeInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VolumeInfo): VolumeInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double measured_i */ 1:
                    message.measuredI = reader.double();
                    break;
                case /* double measured_lra */ 2:
                    message.measuredLra = reader.double();
                    break;
                case /* double measured_tp */ 3:
                    message.measuredTp = reader.double();
                    break;
                case /* double measured_threshold */ 4:
                    message.measuredThreshold = reader.double();
                    break;
                case /* double target_offset */ 5:
                    message.targetOffset = reader.double();
                    break;
                case /* double target_i */ 6:
                    message.targetI = reader.double();
                    break;
                case /* double target_tp */ 7:
                    message.targetTp = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VolumeInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double measured_i = 1; */
        if (message.measuredI !== 0)
            writer.tag(1, WireType.Bit64).double(message.measuredI);
        /* double measured_lra = 2; */
        if (message.measuredLra !== 0)
            writer.tag(2, WireType.Bit64).double(message.measuredLra);
        /* double measured_tp = 3; */
        if (message.measuredTp !== 0)
            writer.tag(3, WireType.Bit64).double(message.measuredTp);
        /* double measured_threshold = 4; */
        if (message.measuredThreshold !== 0)
            writer.tag(4, WireType.Bit64).double(message.measuredThreshold);
        /* double target_offset = 5; */
        if (message.targetOffset !== 0)
            writer.tag(5, WireType.Bit64).double(message.targetOffset);
        /* double target_i = 6; */
        if (message.targetI !== 0)
            writer.tag(6, WireType.Bit64).double(message.targetI);
        /* double target_tp = 7; */
        if (message.targetTp !== 0)
            writer.tag(7, WireType.Bit64).double(message.targetTp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.VolumeInfo
 */
export const VolumeInfo = new VolumeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayViewUniteReq$Type extends MessageType<PlayViewUniteReq> {
    constructor() {
        super("bilibili.app.playerunite.v1.PlayViewUniteReq", [
            { no: 1, name: "vod", kind: "message", T: () => VideoVod },
            { no: 2, name: "spmid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "from_spmid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "extra_content", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 5, name: "bvid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PlayViewUniteReq>): PlayViewUniteReq {
        const message = { spmid: "", fromSpmid: "", extraContent: {}, bvid: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayViewUniteReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayViewUniteReq): PlayViewUniteReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.playerunite.v1.VideoVod vod */ 1:
                    message.vod = VideoVod.internalBinaryRead(reader, reader.uint32(), options, message.vod);
                    break;
                case /* string spmid */ 2:
                    message.spmid = reader.string();
                    break;
                case /* string from_spmid */ 3:
                    message.fromSpmid = reader.string();
                    break;
                case /* map<string, string> extra_content */ 4:
                    this.binaryReadMap4(message.extraContent, reader, options);
                    break;
                case /* string bvid */ 5:
                    message.bvid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap4(map: PlayViewUniteReq["extraContent"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof PlayViewUniteReq["extraContent"] | undefined, val: PlayViewUniteReq["extraContent"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.app.playerunite.v1.PlayViewUniteReq.extra_content");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: PlayViewUniteReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bilibili.app.playerunite.v1.VideoVod vod = 1; */
        if (message.vod)
            VideoVod.internalBinaryWrite(message.vod, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string spmid = 2; */
        if (message.spmid !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.spmid);
        /* string from_spmid = 3; */
        if (message.fromSpmid !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.fromSpmid);
        /* map<string, string> extra_content = 4; */
        for (let k of Object.keys(message.extraContent))
            writer.tag(4, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.extraContent[k]).join();
        /* string bvid = 5; */
        if (message.bvid !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.bvid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.PlayViewUniteReq
 */
export const PlayViewUniteReq = new PlayViewUniteReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayViewUniteReply$Type extends MessageType<PlayViewUniteReply> {
    constructor() {
        super("bilibili.app.playerunite.v1.PlayViewUniteReply", [
            { no: 1, name: "vod_info", kind: "message", T: () => VodInfo },
            { no: 2, name: "play_arc_conf", kind: "message", T: () => PlayArcConf },
            { no: 3, name: "play_device_conf", kind: "message", T: () => PlayDeviceConf },
            { no: 4, name: "event", kind: "message", T: () => Event },
            { no: 5, name: "supplement", kind: "message", T: () => Any },
            { no: 6, name: "play_arc", kind: "message", T: () => PlayArc },
            { no: 7, name: "qn_trial_info", kind: "message", T: () => QnTrialInfo },
            { no: 8, name: "history", kind: "message", T: () => History },
            { no: 9, name: "view_info", kind: "message", T: () => ViewInfo }
        ]);
    }
    create(value?: PartialMessage<PlayViewUniteReply>): PlayViewUniteReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayViewUniteReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayViewUniteReply): PlayViewUniteReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.playerunite.v1.VodInfo vod_info */ 1:
                    message.vodInfo = VodInfo.internalBinaryRead(reader, reader.uint32(), options, message.vodInfo);
                    break;
                case /* bilibili.app.playerunite.v1.PlayArcConf play_arc_conf */ 2:
                    message.playArcConf = PlayArcConf.internalBinaryRead(reader, reader.uint32(), options, message.playArcConf);
                    break;
                case /* bilibili.app.playerunite.v1.PlayDeviceConf play_device_conf */ 3:
                    message.playDeviceConf = PlayDeviceConf.internalBinaryRead(reader, reader.uint32(), options, message.playDeviceConf);
                    break;
                case /* bilibili.app.playerunite.v1.Event event */ 4:
                    message.event = Event.internalBinaryRead(reader, reader.uint32(), options, message.event);
                    break;
                case /* google.protobuf.Any supplement */ 5:
                    message.supplement = Any.internalBinaryRead(reader, reader.uint32(), options, message.supplement);
                    break;
                case /* bilibili.app.playerunite.v1.PlayArc play_arc */ 6:
                    message.playArc = PlayArc.internalBinaryRead(reader, reader.uint32(), options, message.playArc);
                    break;
                case /* bilibili.app.playerunite.v1.QnTrialInfo qn_trial_info */ 7:
                    message.qnTrialInfo = QnTrialInfo.internalBinaryRead(reader, reader.uint32(), options, message.qnTrialInfo);
                    break;
                case /* bilibili.app.playerunite.v1.History history */ 8:
                    message.history = History.internalBinaryRead(reader, reader.uint32(), options, message.history);
                    break;
                case /* bilibili.app.playerunite.v1.ViewInfo view_info */ 9:
                    message.viewInfo = ViewInfo.internalBinaryRead(reader, reader.uint32(), options, message.viewInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayViewUniteReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bilibili.app.playerunite.v1.VodInfo vod_info = 1; */
        if (message.vodInfo)
            VodInfo.internalBinaryWrite(message.vodInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playerunite.v1.PlayArcConf play_arc_conf = 2; */
        if (message.playArcConf)
            PlayArcConf.internalBinaryWrite(message.playArcConf, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playerunite.v1.PlayDeviceConf play_device_conf = 3; */
        if (message.playDeviceConf)
            PlayDeviceConf.internalBinaryWrite(message.playDeviceConf, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playerunite.v1.Event event = 4; */
        if (message.event)
            Event.internalBinaryWrite(message.event, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Any supplement = 5; */
        if (message.supplement)
            Any.internalBinaryWrite(message.supplement, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playerunite.v1.PlayArc play_arc = 6; */
        if (message.playArc)
            PlayArc.internalBinaryWrite(message.playArc, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playerunite.v1.QnTrialInfo qn_trial_info = 7; */
        if (message.qnTrialInfo)
            QnTrialInfo.internalBinaryWrite(message.qnTrialInfo, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playerunite.v1.History history = 8; */
        if (message.history)
            History.internalBinaryWrite(message.history, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playerunite.v1.ViewInfo view_info = 9; */
        if (message.viewInfo)
            ViewInfo.internalBinaryWrite(message.viewInfo, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.PlayViewUniteReply
 */
export const PlayViewUniteReply = new PlayViewUniteReply$Type();
/**
 * @generated ServiceType for protobuf service bilibili.app.playerunite.v1.Player
 */
export const Player = new ServiceType("bilibili.app.playerunite.v1.Player", [
    { name: "PlayViewUnite", options: {}, I: PlayViewUniteReq, O: PlayViewUniteReply }
]);
